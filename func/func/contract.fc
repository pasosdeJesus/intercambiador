{-
  Manage ads in p2p market
-}

int equal_slices (slice a, slice b) asm "SDEQ";

global slice manager_address;
global int public_key;
global cell ads;
global cell valid;

() load_data () impure {
  var ds = get_data().begin_parse();
  manager_address = ds~load_msg_addr();
  dump_stack();
  public_key = ds~load_uint(256);
  ads = ds~load_dict();
  valid = ds~load_dict();
}

() save_data () impure inline_ref {
  set_data(begin_cell()
  .store_slice(manager_address)
  .store_uint(public_key, 256)
  .store_dict(ads)
  .store_dict(valid)
  .end_cell());
}

;; testable
() recv_internal (int balance, int msg_value, cell in_msg_full, slice in_msg_body) {

  var fm = in_msg_full.begin_parse();
  var flags = fm~load_uint(4);
  slice sender_address = fm~load_msg_addr();

  var signature = in_msg_body~load_bits(512);
  var cs = in_msg_body;
  int op = cs~load_uint(32);
  op~dump();

  load_data();


  if (op == 1000) {
    throw_unless(5000, check_signature(slice_hash(in_msg_body), signature, public_key));
    slice seller_address = cs~load_msg_addr();
    throw_unless(5002, equal_slices(sender_address,seller_address));


;;
    save_data();
    return ();
  }
  if (op == 2000) {
    throw_unless(5000, check_signature(slice_hash(in_msg_body), signature, public_key));
    slice seller_address = cs~load_msg_addr();
    throw_unless(5002, equal_slices(sender_address,seller_address));


;;
    save_data();
    return ();
  }
  if (op == 3000) {
    throw_unless(5000, check_signature(slice_hash(in_msg_body), signature, public_key));
    slice seller_address = cs~load_msg_addr();
    throw_unless(5002, equal_slices(sender_address,seller_address));


;;
    save_data();
    return ();
  }
  if (op == 4000) {
    throw_unless(5000, equal_slices(sender_address,manager_address));

;;
    save_data();
    return ();
  }

  throw_if(5001, -1); ;; invalid operation

}
