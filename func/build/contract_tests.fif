"Asm.fif" include
// automatically generated from `/home/vtamara/.config/toncli/func-libs/error_codes.func` `/home/vtamara/.config/toncli/func-libs/math.func` `/home/vtamara/.config/toncli/func-libs/stdlib.func` `/home/vtamara/.config/toncli/test-libs/1.address_helpers.func` `/home/vtamara/.config/toncli/test-libs/bad_messages_generator.func` `/home/vtamara/.config/toncli/test-libs/c5_parse_helpers.func` `/home/vtamara/.config/toncli/test-libs/message_helpers.func` `/home/vtamara/.config/toncli/test-libs/storage-test-helpers.func` `/home/vtamara/.config/toncli/test-libs/tests-helpers.func` `/home/vtamara/.config/toncli/test-libs/token-helpers.func` `/home/vtamara/comp/ton/intercambiador/func/func/ads_contract.fc` `/home/vtamara/comp/ton/intercambiador/func/tests/ruby_ayuda.fc` `/home/vtamara/comp/ton/intercambiador/func/tests/elixir_ayuda.fc` incl:`/home/vtamara/comp/ton/intercambiador/func/tests/../func/typehelpers.fc` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  114362 DECLMETHOD generate_empty_address
  103563 DECLMETHOD generate_internal_address
  71142 DECLMETHOD generate_internal_address_with_custom_data
  105789 DECLMETHOD generate_external_address
  77760 DECLMETHOD generate_external_address_with_custom_data
  119020 DECLMETHOD generate_var_address
  101577 DECLMETHOD generate_var_address_with_custom_data
  DECLPROC generate_any_address
  76887 DECLMETHOD generate_external_out_message_with_bad_source_address
  113901 DECLMETHOD generate_external_out_message_with_bad_destination_address
  124331 DECLMETHOD generate_external_in_message_with_bad_source_address
  128854 DECLMETHOD generate_external_in_message_with_bad_destination_address
  122899 DECLMETHOD generate_internal_message_with_bad_grams_data
  105345 DECLMETHOD generate_internal_message_with_bad_init_state_data
  DECLPROC parse_send_raw_message
  DECLPROC parse_lib_code
  DECLPROC parse_raw_reserve
  DECLPROC parse_set_code
  DECLPROC parse_c5
  66092 DECLMETHOD generate_init_state
  86734 DECLMETHOD generate_init_state_with_data
  70014 DECLMETHOD parse_init_state
  71497 DECLMETHOD random_query_id
  128031 DECLMETHOD generate_internal_message_body
  103755 DECLMETHOD generate_internal_message_custom
  DECLPROC generate_get_royalty_params
  125184 DECLMETHOD generate_nft_transfer_request
  93113 DECLMETHOD generate_nft_get_static_data_request
  80940 DECLMETHOD generate_nft_deploy_request
  72255 DECLMETHOD generate_jetton_burn_request
  DECLPROC generate_jetton_burn_notification
  128076 DECLMETHOD generate_jetton_internal_transfer_request
  100003 DECLMETHOD generate_jetton_transfer_request
  129018 DECLMETHOD generate_internal_message
  108731 DECLMETHOD generate_internal_message_relaxed
  115574 DECLMETHOD generate_external_in_message
  78122 DECLMETHOD generate_external_in_message_with_empty_source_address
  94514 DECLMETHOD generate_external_out_message
  75192 DECLMETHOD generate_external_out_message_with_empty_destination_address
  77897 DECLMETHOD generate_external_out_message_relaxed
  94767 DECLMETHOD parse_internal_message
  97177 DECLMETHOD parse_external_message
  69682 DECLMETHOD init_environment
  104832 DECLMETHOD storage_key
  68533 DECLMETHOD load_storage_with_tag
  113134 DECLMETHOD save_storage_with_tag
  85860 DECLMETHOD get_c7
  78457 DECLMETHOD invoke_method
  93676 DECLMETHOD invoke_method_expect_fail
  127733 DECLMETHOD assert_no_actions
  DECLPROC token_snake_len
  DECLPROC get_snake_tail
  103208 DECLMETHOD snake_concat
  DECLPROC snake_concat_tagged
  DECLPROC snake_equal?
  DECLPROC load_data
  DECLPROC save_data
  DECLPROC recv_internal
  85668 DECLMETHOD get_manager_address
  78748 DECLMETHOD get_public_key
  85143 DECLMETHOD seqno
  108115 DECLMETHOD get_ads
  DECLPROC __test_wrongmessage
  DECLPROC __test_wrongseqno
  DECLPROC __test_wrongsignature
  DECLPROC reconoce_c5
  DECLPROC __test_goodsignature_badop
  DECLPROC __test_add_ad_fewcoins
  DECLPROC __test_add_ad_somecoins
  DECLGLOBVAR manager_address
  DECLGLOBVAR public_key
  DECLGLOBVAR gseqno
  DECLGLOBVAR ads
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  generate_empty_address PROC:<{
    // 
    0 PUSHINT	//  _0=0
    NEWC	//  _0=0 _1
    2 STU	//  _3
    ENDC	//  _4
    CTOS	//  _5
  }>
  generate_internal_address PROC:<{
    // 
    RANDU256	//  address
    -1 PUSHINT	//  address _3=-1
    0 PUSHINT	//  address _3=-1 _4=0
    2 PUSHINT	//  address _3=-1 _4=0 _5=2
    NEWC	//  address _3=-1 _4=0 _5=2 _6
    2 STU	//  address _3=-1 _4=0 _8
    1 STU	//  address _3=-1 _10
    8 STI	//  address _12
    256 STU	//  _14
    ENDC	//  _15
    CTOS	//  address_cell
  }>
  generate_internal_address_with_custom_data PROC:<{
    //  anycast workchain_id address
    2 PUSHINT	//  anycast workchain_id address _4=2
    NEWC	//  anycast workchain_id address _4=2 _5
    2 STU	//  anycast workchain_id address _7
    s1 s3 XCHG	//  address workchain_id anycast _7
    1 STU	//  address workchain_id _9
    8 STI	//  address _11
    256 STU	//  _13
    ENDC	//  _14
    CTOS	//  address_cell
  }>
  generate_external_address PROC:<{
    //  address_length
    RANDU256	//  address_length address
    1 PUSHINT	//  address_length address _4=1
    NEWC	//  address_length address _4=1 _5
    2 STU	//  address_length address _7
    s2 s(-1) PUXC	//  address_length address address_length _7
    9 STU	//  address_length address _9
    ROT	//  address _9 address_length
    STUX	//  _10
    ENDC	//  _11
    CTOS	//  address_cell
  }>
  generate_external_address_with_custom_data PROC:<{
    //  address_length address
    1 PUSHINT	//  address_length address _3=1
    NEWC	//  address_length address _3=1 _4
    2 STU	//  address_length address _6
    s2 s(-1) PUXC	//  address_length address address_length _6
    9 STU	//  address_length address _8
    ROT	//  address _8 address_length
    STUX	//  _9
    ENDC	//  _10
    CTOS	//  address_cell
  }>
  generate_var_address PROC:<{
    //  address_length
    DUP
    8 PUSHPOW2	//  address_length address_length _1=256
    GREATER	//  address_length _2
    IFJMP:<{	//  address_length
      RANDU256	//  address_length address
      RANDU256	//  address_length address address_secondpart
      -1 PUSHINT	//  address_length address address_secondpart _8=-1
      0 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0
      3 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0 _10=3
      NEWC	//  address_length address address_secondpart _8=-1 _9=0 _10=3 _11
      2 STU	//  address_length address address_secondpart _8=-1 _9=0 _13
      1 STU	//  address_length address address_secondpart _8=-1 _15
      s1 s4 XCHG	//  _8=-1 address address_secondpart address_length _15
      9 STU	//  _8=-1 address address_secondpart _17
      s1 s3 XCHG	//  address_secondpart address _8=-1 _17
      8 STI	//  address_secondpart address _19
      256 STU	//  address_secondpart _21
      256 STU	//  _23
      ENDC	//  _24
      CTOS	//  address_cell
    }>	//  address_length
    RANDU256	//  address_length address
    -1 PUSHINT	//  address_length address _29=-1
    0 PUSHINT	//  address_length address _29=-1 _30=0
    3 PUSHINT	//  address_length address _29=-1 _30=0 _31=3
    NEWC	//  address_length address _29=-1 _30=0 _31=3 _32
    2 STU	//  address_length address _29=-1 _30=0 _34
    1 STU	//  address_length address _29=-1 _36
    s3 s(-1) PUXC	//  address_length address _29=-1 address_length _36
    9 STU	//  address_length address _29=-1 _38
    8 STI	//  address_length address _40
    ROT	//  address _40 address_length
    STUX	//  _41
    ENDC	//  _42
    CTOS	//  address_cell
  }>
  generate_var_address_with_custom_data PROC:<{
    //  anycast workchain_id address_length address_slice
    OVER
    8 PUSHPOW2	//  anycast workchain_id address_length address_slice address_length _4=256
    GREATER	//  anycast workchain_id address_length address_slice _5
    IFJMP:<{	//  anycast workchain_id address_length address_slice
      256 LDU	//  anycast workchain_id address_length addr address_slice
      256 LDU	//  anycast workchain_id address_length addr _52 _51
      DROP	//  anycast workchain_id address_length addr addr_second_part
      3 PUSHINT	//  anycast workchain_id address_length addr addr_second_part _15=3
      NEWC	//  anycast workchain_id address_length addr addr_second_part _15=3 _16
      2 STU	//  anycast workchain_id address_length addr addr_second_part _18
      s1 s5 XCHG	//  addr_second_part workchain_id address_length addr anycast _18
      1 STU	//  addr_second_part workchain_id address_length addr _20
      s1 s2 XCHG	//  addr_second_part workchain_id addr address_length _20
      9 STU	//  addr_second_part workchain_id addr _22
      s1 s2 XCHG	//  addr_second_part addr workchain_id _22
      8 STI	//  addr_second_part addr _24
      256 STU	//  addr_second_part _26
      256 STU	//  _28
      ENDC	//  _29
      CTOS	//  address_cell
    }>	//  anycast workchain_id address_length address_slice
    256 LDU	//  anycast workchain_id address_length _54 _53
    DROP	//  anycast workchain_id address_length addr
    3 PUSHINT	//  anycast workchain_id address_length addr _36=3
    NEWC	//  anycast workchain_id address_length addr _36=3 _37
    2 STU	//  anycast workchain_id address_length addr _39
    s1 s4 XCHG	//  addr workchain_id address_length anycast _39
    1 STU	//  addr workchain_id address_length _41
    s1 s(-1) PUXC	//  addr workchain_id address_length address_length _41
    9 STU	//  addr workchain_id address_length _43
    s1 s2 XCHG	//  addr address_length workchain_id _43
    8 STI	//  addr address_length _45
    SWAP	//  addr _45 address_length
    STUX	//  _46
    ENDC	//  _47
    CTOS	//  address_cell
  }>
  generate_any_address PROC:<{
    //  typeOfAddress
    DUP	//  typeOfAddress typeOfAddress
    0 EQINT	//  typeOfAddress _2
    IFJMP:<{	//  typeOfAddress
      DROP	// 
      generate_empty_address CALLDICT	//  _3
    }>	//  typeOfAddress
    DUP	//  typeOfAddress typeOfAddress
    1 EQINT	//  typeOfAddress _5
    IFJMP:<{	//  typeOfAddress
      DROP	// 
      generate_internal_address CALLDICT	//  _6
    }>	//  typeOfAddress
    2 EQINT	//  _8
    IFJMP:<{	// 
      8 PUSHPOW2	//  _9=256
      generate_external_address CALLDICT	//  _10
    }>	// 
    8 PUSHPOW2	//  _11=256
    generate_var_address CALLDICT	//  _12
  }>
  generate_external_out_message_with_bad_source_address PROC:<{
    // 
    1 PUSHINT	//  _1=1
    -1 PUSHINT	//  _1=1 _2=-1
    0 PUSHINT	//  _1=1 _2=-1 _3=0
    2 PUSHINT	//  _1=1 _2=-1 _3=0 _4=2
    NEWC	//  _1=1 _2=-1 _3=0 _4=2 _5
    2 STU	//  _1=1 _2=-1 _3=0 _7
    1 STU	//  _1=1 _2=-1 _9
    8 STI	//  _1=1 _11
    10 STU	//  _13
    ENDC	//  _14
    CTOS	//  ssrc_invalid
    0 PUSHINT	//  ssrc_invalid _16=0
    3 PUSHINT	//  ssrc_invalid _16=0 _17=3
    NEWC	//  ssrc_invalid _16=0 _17=3 _18
    2 STU	//  ssrc_invalid _16=0 _20
    1 STI	//  ssrc_invalid _22
    SWAP	//  _22 ssrc_invalid
    STSLICER	//  _23
    ENDC	//  _24
  }>
  generate_external_out_message_with_bad_destination_address PROC:<{
    // 
    generate_internal_address CALLDICT	//  ssrc
    0 PUSHINT	//  ssrc _2=0
    3 PUSHINT	//  ssrc _2=0 _3=3
    NEWC	//  ssrc _2=0 _3=3 _4
    2 STU	//  ssrc _2=0 _6
    ROT	//  _2=0 _6 ssrc
    STSLICER	//  _2=0 _7
    1 STI	//  _9
    ENDC	//  _10
  }>
  generate_external_in_message_with_bad_source_address PROC:<{
    // 
    0 PUSHINT	//  _1=0
    7 PUSHPOW2	//  _1=0 _2=128
    1 PUSHINT	//  _1=0 _2=128 _3=1
    NEWC	//  _1=0 _2=128 _3=1 _4
    2 STU	//  _1=0 _2=128 _6
    9 STU	//  _1=0 _8
    10 STU	//  _10
    ENDC	//  _11
    CTOS	//  ssrc_invalid
    2 PUSHINT	//  ssrc_invalid _13=2
    NEWC	//  ssrc_invalid _13=2 _14
    2 STU	//  ssrc_invalid _16
    SWAP	//  _16 ssrc_invalid
    STSLICER	//  _17
    ENDC	//  _18
  }>
  generate_external_in_message_with_bad_destination_address PROC:<{
    // 
    8 PUSHPOW2	//  _1=256
    generate_external_address CALLDICT	//  ssrc
    0 PUSHINT	//  ssrc _3=0
    2 PUSHINT	//  ssrc _3=0 _4=2
    NEWC	//  ssrc _3=0 _4=2 _5
    2 STU	//  ssrc _3=0 _7
    ROT	//  _3=0 _7 ssrc
    STSLICER	//  _3=0 _8
    1 STI	//  _10
    ENDC	//  _11
  }>
  generate_internal_message_with_bad_grams_data PROC:<{
    // 
    generate_internal_address CALLDICT	//  ssrc
    generate_internal_address CALLDICT	//  ssrc sdest
    1 PUSHINT	//  ssrc sdest _4=1
    8 PUSHINT	//  ssrc sdest _4=1 _5=8
    0 PUSHINT	//  ssrc sdest _4=1 _5=8 _6=0
    s0 s0 s0 PUSH3	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _8=0 _9=0
    NEWC	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _8=0 _9=0 _10
    1 STU	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _8=0 _12
    1 STU	//  ssrc sdest _4=1 _5=8 _6=0 _7=0 _14
    1 STU	//  ssrc sdest _4=1 _5=8 _6=0 _16
    1 STU	//  ssrc sdest _4=1 _5=8 _18
    s0 s4 XCHG2	//  _5=8 sdest _4=1 _18 ssrc
    STSLICER	//  _5=8 sdest _4=1 _19
    ROT	//  _5=8 _4=1 _19 sdest
    STSLICER	//  _5=8 _4=1 _20
    s1 s2 XCHG	//  _4=1 _5=8 _20
    4 STU	//  _4=1 _22
    1 STU	//  _24
    ENDC	//  _25
  }>
  generate_internal_message_with_bad_init_state_data PROC:<{
    // 
    generate_internal_address CALLDICT	//  ssrc
    generate_internal_address CALLDICT	//  ssrc sdest
    1 PUSHINT	//  ssrc sdest _5=1
    s0 s0 PUSH2	//  ssrc sdest _5=1 _6=1 _7=1
    0 PUSHINT	//  ssrc sdest _5=1 _6=1 _7=1 _8=0
    s1 s1 s0 PUSH3	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _10=1 _11=0
    NEWC	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _10=1 _11=0 _12
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _10=1 _14
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _9=1 _16
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _8=0 _18
    1 STU	//  ssrc sdest _5=1 _6=1 _7=1 _20
    1 STU	//  ssrc sdest _5=1 _6=1 _22
    1 STU	//  ssrc sdest _5=1 _24
    1 STU	//  ssrc sdest init_state_with_bad_data
    0 PUSHINT	//  ssrc sdest init_state_with_bad_data _27=0
    SWAP	//  ssrc sdest _27=0 init_state_with_bad_data
    ENDC	//  ssrc sdest _27=0 _28
    1 PUSHINT	//  ssrc sdest _27=0 _28 _29=1
    DUP	//  ssrc sdest _27=0 _28 _29=1 _30=1
    1000 PUSHINT	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000
    DUP	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000
    PUSHNULL	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33
    s6 s6 s6 PUSH3	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _36=0
    DUP	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _36=0 _37=0
    NEWC	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _36=0 _37=0 _38
    1 STU	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _36=0 _40
    1 STU	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _35=0 _42
    1 STU	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _34=0 _44
    1 STU	//  ssrc sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _33 _46
    s0 s9 XCHG2	//  _33 sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _46 ssrc
    STSLICER	//  _33 sdest _27=0 _28 _29=1 _30=1 _31=1000 _32=1000 _47
    s0 s7 XCHG2	//  _33 _32=1000 _27=0 _28 _29=1 _30=1 _31=1000 _47 sdest
    STSLICER	//  _33 _32=1000 _27=0 _28 _29=1 _30=1 _31=1000 _48
    s5 PUSH	//  _33 _32=1000 _27=0 _28 _29=1 _30=1 _31=1000 _48 _49=0
    STGRAMS	//  _33 _32=1000 _27=0 _28 _29=1 _30=1 _31=1000 _50
    s1 s7 XCHG	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _33 _50
    STDICT	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _51
    s4 PUSH	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _51 _52=0
    STGRAMS	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _53
    s4 PUSH	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _53 _54=0
    STGRAMS	//  _31=1000 _32=1000 _27=0 _28 _29=1 _30=1 _55
    s1 s5 XCHG	//  _31=1000 _30=1 _27=0 _28 _29=1 _32=1000 _55
    64 STU	//  _31=1000 _30=1 _27=0 _28 _29=1 _57
    s1 s5 XCHG	//  _29=1 _30=1 _27=0 _28 _31=1000 _57
    32 STU	//  _29=1 _30=1 _27=0 _28 _59
    s1 s3 XCHG	//  _29=1 _28 _27=0 _30=1 _59
    1 STU	//  _29=1 _28 _27=0 _61
    s1 s3 XCHG	//  _27=0 _28 _29=1 _61
    1 STU	//  _27=0 _28 _63
    STREF	//  _27=0 _64
    1 STU	//  _66
    ENDC	//  _67
  }>
  parse_send_raw_message PROCINLINE:<{
    //  out_action
    8 LDU	//  _1 out_action
    LDREF	//  _1 _9 _8
    DROP	//  _1 _4
  }>
  parse_lib_code PROCINLINE:<{
    //  out_action
    7 LDU	//  mode out_action
    DUP	//  mode out_action out_action
    SREFS	//  mode out_action _5
    0 GTINT	//  mode out_action _7
    IF:<{	//  mode out_action
      LDREF	//  mode _20 _19
      DROP	//  mode _8
    }>ELSE<{	//  mode out_action
      256 LDSLICE	//  mode _22 _21
      DROP	//  mode loaded_bits
      NEWC	//  mode loaded_bits _14
      SWAP	//  mode _14 loaded_bits
      STSLICER	//  mode _15
      ENDC	//  mode _16
    }>
  }>
  parse_raw_reserve PROCINLINE:<{
    //  out_action
    8 LDU	//  _1 out_action
    LDDICT	//  _1 _9 _8
    DROP	//  _1 _4
  }>
  parse_set_code PROCINLINE:<{
    //  out_action
    LDREF	//  _4 _3
    DROP	//  _1
  }>
  parse_c5 PROCINLINE:<{
    // 
    NIL	//  list_of_actions_tuple
    c5 PUSH	//  list_of_actions_tuple c5
    NIL	//  list_of_actions_tuple c5 actions
    SWAP	//  list_of_actions_tuple actions c5
    CTOS	//  list_of_actions_tuple actions out_action_node
    DUP	//  list_of_actions_tuple actions out_action_node out_action_node
    SBITS	//  list_of_actions_tuple actions out_action_node _8
    0 EQINT	//  list_of_actions_tuple actions out_action_node _10
    IF:<{	//  list_of_actions_tuple actions out_action_node
      3 BLKDROP	// 
      PUSHNULL	//  _11
    }>ELSE<{	//  list_of_actions_tuple actions out_action_node
      0 PUSHINT	//  list_of_actions_tuple actions out_action_node num=0
      UNTIL:<{
        SWAP	//  list_of_actions_tuple actions num out_action_node
        LDREF	//  list_of_actions_tuple actions num next out_action_node
        s0 s3 XCHG2	//  list_of_actions_tuple next num out_action_node actions
        CONS	//  list_of_actions_tuple next num actions
        s0 s2 XCHG	//  list_of_actions_tuple actions num next
        CTOS	//  list_of_actions_tuple actions num out_action_node
        SWAP	//  list_of_actions_tuple actions out_action_node num
        INC	//  list_of_actions_tuple actions out_action_node num
        OVER	//  list_of_actions_tuple actions out_action_node num out_action_node
        SBITS	//  list_of_actions_tuple actions out_action_node num _23
        0 EQINT	//  list_of_actions_tuple actions out_action_node num break
      }>	//  list_of_actions_tuple actions out_action_node num
      NIP	//  list_of_actions_tuple actions num
      0 PUSHINT	//  list_of_actions_tuple actions num i=0
      UNTIL:<{
        s0 s2 XCHG	//  list_of_actions_tuple i num actions
        UNCONS	//  list_of_actions_tuple i num out_action actions
        SWAP	//  list_of_actions_tuple i num actions out_action
        32 LDU	//  list_of_actions_tuple i num actions action_code out_action
        OVER
        247711853 PUSHINT	//  list_of_actions_tuple i num actions action_code out_action action_code _35=247711853
        EQUAL	//  list_of_actions_tuple i num actions action_code out_action _36
        IF:<{	//  list_of_actions_tuple i num actions action_code out_action
          NIP	//  list_of_actions_tuple i num actions out_action
          parse_send_raw_message INLINECALLDICT	//  list_of_actions_tuple i num actions mode body
          0 PUSHINT	//  list_of_actions_tuple i num actions mode body _42=0
          s0 s2 XCHG	//  list_of_actions_tuple i num actions _42=0 body mode
          TRIPLE	//  list_of_actions_tuple i num actions _41
          s1 s4 XCHG	//  actions i num list_of_actions_tuple _41
          TPUSH	//  actions i num list_of_actions_tuple
        }>ELSE<{	//  list_of_actions_tuple i num actions action_code out_action
          OVER
          2907562126 PUSHINT	//  list_of_actions_tuple i num actions action_code out_action action_code _44=2907562126
          EQUAL	//  list_of_actions_tuple i num actions action_code out_action _45
          IF:<{	//  list_of_actions_tuple i num actions action_code out_action
            NIP	//  list_of_actions_tuple i num actions out_action
            parse_set_code INLINECALLDICT	//  list_of_actions_tuple i num actions new_setcode
            1 PUSHINT	//  list_of_actions_tuple i num actions new_setcode _50=1
            SWAP
            -1 PUSHINT	//  list_of_actions_tuple i num actions _50=1 new_setcode _51=-1
            TRIPLE	//  list_of_actions_tuple i num actions _49
            s1 s4 XCHG	//  actions i num list_of_actions_tuple _49
            TPUSH	//  actions i num list_of_actions_tuple
          }>ELSE<{	//  list_of_actions_tuple i num actions action_code out_action
            OVER
            921090057 PUSHINT	//  list_of_actions_tuple i num actions action_code out_action action_code _53=921090057
            EQUAL	//  list_of_actions_tuple i num actions action_code out_action _54
            IF:<{	//  list_of_actions_tuple i num actions action_code out_action
              NIP	//  list_of_actions_tuple i num actions out_action
              parse_raw_reserve INLINECALLDICT	//  list_of_actions_tuple i num actions mode currencies
              2 PUSHINT	//  list_of_actions_tuple i num actions mode currencies _60=2
              s0 s2 XCHG	//  list_of_actions_tuple i num actions _60=2 currencies mode
              TRIPLE	//  list_of_actions_tuple i num actions _59
              s1 s4 XCHG	//  actions i num list_of_actions_tuple _59
              TPUSH	//  actions i num list_of_actions_tuple
            }>ELSE<{	//  list_of_actions_tuple i num actions action_code out_action
              SWAP
              653925844 PUSHINT	//  list_of_actions_tuple i num actions out_action action_code _62=653925844
              EQUAL	//  list_of_actions_tuple i num actions out_action _63
              IF:<{	//  list_of_actions_tuple i num actions out_action
                parse_lib_code INLINECALLDICT	//  list_of_actions_tuple i num actions mode lib_cell_or_lib_hash
                3 PUSHINT	//  list_of_actions_tuple i num actions mode lib_cell_or_lib_hash _69=3
                s0 s2 XCHG	//  list_of_actions_tuple i num actions _69=3 lib_cell_or_lib_hash mode
                TRIPLE	//  list_of_actions_tuple i num actions _68
                s1 s4 XCHG	//  actions i num list_of_actions_tuple _68
                TPUSH	//  actions i num list_of_actions_tuple
                s0 s3 XCHG	//  list_of_actions_tuple i num actions
              }>ELSE<{
                DROP	//  list_of_actions_tuple i num actions
              }>
              s0 s3 XCHG	//  actions i num list_of_actions_tuple
            }>
          }>
        }>
        s0 s2 XCHG	//  actions list_of_actions_tuple num i
        INC	//  actions list_of_actions_tuple num i
        s0 s1 PUSH2	//  actions list_of_actions_tuple num i i num
        GEQ	//  actions list_of_actions_tuple num i _73
        s3 s4 XCHG	//  list_of_actions_tuple actions num i _73
      }>	//  list_of_actions_tuple actions num i
      3 BLKDROP	//  list_of_actions_tuple
    }>
  }>
  generate_init_state PROC:<{
    // 
    0 PUSHINT	//  _0=0
    s0 s0 s0 PUSH3	//  _0=0 _1=0 _2=0 _3=0
    1 PUSHINT	//  _0=0 _1=0 _2=0 _3=0 _4=1
    s0 s1 PUSH2	//  _0=0 _1=0 _2=0 _3=0 _4=1 _5=1 _6=0
    NEWC	//  _0=0 _1=0 _2=0 _3=0 _4=1 _5=1 _6=0 _7
    1 STU	//  _0=0 _1=0 _2=0 _3=0 _4=1 _5=1 _9
    1 STU	//  _0=0 _1=0 _2=0 _3=0 _4=1 _11
    1 STU	//  _0=0 _1=0 _2=0 _3=0 _13
    1 STU	//  _0=0 _1=0 _2=0 _15
    1 STU	//  _0=0 _1=0 _17
    1 STU	//  _0=0 _19
    1 STU	//  _21
  }>
  generate_init_state_with_data PROC:<{
    //  code data library
    1 PUSHINT	//  code data library _3=1
    s0 s0 PUSH2	//  code data library _3=1 _4=1 _5=1
    0 PUSHINT	//  code data library _3=1 _4=1 _5=1 _6=0
    s1 s1 s0 PUSH3	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _8=1 _9=0
    NEWC	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _8=1 _9=0 _10
    1 STU	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _8=1 _12
    1 STU	//  code data library _3=1 _4=1 _5=1 _6=0 _7=1 _14
    1 STU	//  code data library _3=1 _4=1 _5=1 _6=0 _16
    1 STU	//  code data library _3=1 _4=1 _5=1 _18
    1 STU	//  code data library _3=1 _4=1 _20
    s1 s5 XCHG	//  _4=1 data library _3=1 code _20
    STREF	//  _4=1 data library _3=1 _21
    s1 s4 XCHG	//  _3=1 data library _4=1 _21
    1 STU	//  _3=1 data library _23
    s1 s2 XCHG	//  _3=1 library data _23
    STREF	//  _3=1 library _24
    s1 s2 XCHG	//  library _3=1 _24
    1 STU	//  library _26
    STREF	//  _27
  }>
  parse_init_state PROC:<{
    //  cs
    NIL	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_five cs
    s2 s1 XCPU	//  cs maybe_five parsed_tuple maybe_five
    TPUSH	//  cs maybe_five parsed_tuple
    SWAP	//  cs parsed_tuple maybe_five
    1 EQINT	//  cs parsed_tuple _10
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      5 LDU	//  parsed_tuple _12 cs
      -ROT	//  cs parsed_tuple _12
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_tick_tock cs
    s2 s1 XCPU	//  cs maybe_tick_tock parsed_tuple maybe_tick_tock
    TPUSH	//  cs maybe_tick_tock parsed_tuple
    SWAP	//  cs parsed_tuple maybe_tick_tock
    1 EQINT	//  cs parsed_tuple _23
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      1 LDU	//  parsed_tuple _25 cs
      -ROT	//  cs parsed_tuple _25
      TPUSH	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      1 LDU	//  parsed_tuple _30 cs
      -ROT	//  cs parsed_tuple _30
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_code cs
    s2 s1 XCPU	//  cs maybe_code parsed_tuple maybe_code
    TPUSH	//  cs maybe_code parsed_tuple
    SWAP	//  cs parsed_tuple maybe_code
    1 EQINT	//  cs parsed_tuple _41
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      LDREF	//  parsed_tuple _43 cs
      -ROT	//  cs parsed_tuple _43
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_data cs
    s2 s1 XCPU	//  cs maybe_data parsed_tuple maybe_data
    TPUSH	//  cs maybe_data parsed_tuple
    SWAP	//  cs parsed_tuple maybe_data
    1 EQINT	//  cs parsed_tuple _53
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      LDREF	//  parsed_tuple _55 cs
      -ROT	//  cs parsed_tuple _55
      TPUSH	//  cs parsed_tuple
    }>	//  cs parsed_tuple
    SWAP	//  parsed_tuple cs
    1 LDU	//  parsed_tuple maybe_library cs
    s2 s1 XCPU	//  cs maybe_library parsed_tuple maybe_library
    TPUSH	//  cs maybe_library parsed_tuple
    SWAP	//  cs parsed_tuple maybe_library
    1 EQINT	//  cs parsed_tuple _65
    IF:<{	//  cs parsed_tuple
      SWAP	//  parsed_tuple cs
      LDREF	//  parsed_tuple _91 _90
      DROP	//  parsed_tuple _67
      TPUSH	//  parsed_tuple
    }>ELSE<{
      NIP	//  parsed_tuple
    }>
  }>
  random_query_id PROC:<{
    // 
    LTIME
    ADDRAND
    64 PUSHPOW2	//  _3
    RAND	//  _4
    INC	//  _6
  }>
  generate_internal_message_body PROC:<{
    //  op query_id
    SWAP
    NEWC	//  query_id op _3
    32 STU	//  query_id body
    OVER	//  query_id body query_id
    0 EQINT	//  query_id body _7
    IF:<{	//  query_id body
      NIP	//  body
      random_query_id CALLDICT	//  body query_id
      SWAP	//  query_id body
    }>	//  query_id body
    64 STU	//  _10
  }>
  generate_internal_message_custom PROC:<{
    //  bounce ton_amount init_state payload src_addr dst_addr fwd_fee
    s2 PUSH	//  bounce ton_amount init_state payload src_addr dst_addr fwd_fee src_addr
    ISNULL	//  bounce ton_amount init_state payload src_addr dst_addr fwd_fee _8
    IF:<{	//  bounce ton_amount init_state payload src_addr dst_addr fwd_fee
      s2 POP	//  bounce ton_amount init_state payload fwd_fee dst_addr
      generate_internal_address CALLDICT	//  bounce ton_amount init_state payload fwd_fee dst_addr _9
    }>ELSE<{	//  bounce ton_amount init_state payload _9 dst_addr fwd_fee
      s0 s2 XCHG	//  bounce ton_amount init_state payload fwd_fee dst_addr _9
    }>	//  bounce ton_amount init_state payload fwd_fee dst_addr ssrc
    OVER	//  bounce ton_amount init_state payload fwd_fee dst_addr ssrc dst_addr
    ISNULL	//  bounce ton_amount init_state payload fwd_fee dst_addr ssrc _12
    IF:<{	//  bounce ton_amount init_state payload fwd_fee dst_addr ssrc
      NIP	//  bounce ton_amount init_state payload fwd_fee ssrc
      generate_internal_address CALLDICT	//  bounce ton_amount init_state payload fwd_fee ssrc _13
    }>ELSE<{	//  bounce ton_amount init_state payload fwd_fee _13 ssrc
      SWAP	//  bounce ton_amount init_state payload fwd_fee ssrc _13
    }>	//  bounce ton_amount init_state payload fwd_fee ssrc sdest
    1000 PUSHINT	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000
    DUP	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000
    PUSHNULL	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18
    0 PUSHINT	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0
    s0 s0 PUSH2	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0 _20=0 _21=0
    NEWC	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0 _20=0 _21=0 _22
    1 STU	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0 _20=0 _24
    1 STU	//  bounce ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _19=0 _26
    s1 s11 XCHG	//  _19=0 ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 bounce _26
    1 STU	//  _19=0 ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _18 _28
    s1 s10 XCHG	//  _18 ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _19=0 _28
    1 STU	//  _18 ton_amount init_state payload fwd_fee ssrc sdest _16=1000 _17=1000 _30
    s0 s4 XCHG2	//  _18 ton_amount init_state payload fwd_fee _17=1000 sdest _16=1000 _30 ssrc
    STSLICER	//  _18 ton_amount init_state payload fwd_fee _17=1000 sdest _16=1000 _31
    ROT	//  _18 ton_amount init_state payload fwd_fee _17=1000 _16=1000 _31 sdest
    STSLICER	//  _18 ton_amount init_state payload fwd_fee _17=1000 _16=1000 _32
    s0 s6 XCHG2	//  _18 _16=1000 init_state payload fwd_fee _17=1000 _32 ton_amount
    STGRAMS	//  _18 _16=1000 init_state payload fwd_fee _17=1000 _33
    s1 s6 XCHG	//  _17=1000 _16=1000 init_state payload fwd_fee _18 _33
    STDICT	//  _17=1000 _16=1000 init_state payload fwd_fee _34
    0 PUSHINT	//  _17=1000 _16=1000 init_state payload fwd_fee _34 _35=0
    STGRAMS	//  _17=1000 _16=1000 init_state payload fwd_fee _36
    SWAP	//  _17=1000 _16=1000 init_state payload _36 fwd_fee
    STGRAMS	//  _17=1000 _16=1000 init_state payload _37
    s1 s4 XCHG	//  payload _16=1000 init_state _17=1000 _37
    64 STU	//  payload _16=1000 init_state _39
    s1 s2 XCHG	//  payload init_state _16=1000 _39
    32 STU	//  payload init_state _41
    s1 s(-1) PUXC	//  payload init_state init_state _41
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _45
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _48
      OVER	//  payload msg init_state_builder _48 init_state_builder
      BBITS	//  payload msg init_state_builder _48 _49
      ADD	//  payload msg init_state_builder _50
      10 PUSHPOW2DEC	//  payload msg init_state_builder _50 _51=1023
      GEQ	//  payload msg init_state_builder _52
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _53
        1 PUSHINT
        ROT	//  payload _53 _54=1 msg
        1 STU	//  payload _53 _56
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _58=0 msg
        1 STU	//  payload init_state_builder _60
        SWAP	//  payload _60 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _62
    s2 PUSH	//  payload msg _62 payload
    BBITS	//  payload msg _62 _63
    ADD	//  payload msg _64
    10 PUSHPOW2DEC	//  payload msg _64 _65=1023
    GEQ	//  payload msg _66
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _67
      1 PUSHINT
      ROT	//  _67 _68=1 msg
      1 STU	//  _67 _70
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _72=0
      SWAP	//  payload _72=0 msg
      1 STU	//  payload _74
      SWAP	//  _74 payload
      STBR	//  msg
    }>
    ENDC	//  _76
  }>
  generate_get_royalty_params PROC:<{
    //  query_id
    1765620048 PUSHINT	//  query_id _1=1765620048
    SWAP	//  _1=1765620048 query_id
    generate_internal_message_body CALLDICT	//  _2
  }>
  generate_nft_transfer_request PROC:<{
    //  new_owner response_dst query_id custom_payload forward_amount forward_payload is_ref?
    1607220500 PUSHINT	//  new_owner response_dst query_id custom_payload forward_amount forward_payload is_ref? _8=1607220500
    s0 s5 XCHG2	//  new_owner response_dst is_ref? custom_payload forward_amount forward_payload _8=1607220500 query_id
    generate_internal_message_body CALLDICT	//  new_owner response_dst is_ref? custom_payload forward_amount forward_payload _9
    s0 s6 XCHG2	//  forward_payload response_dst is_ref? custom_payload forward_amount _9 new_owner
    STSLICER	//  forward_payload response_dst is_ref? custom_payload forward_amount _10
    s0 s4 XCHG2	//  forward_payload forward_amount is_ref? custom_payload _10 response_dst
    STSLICER	//  forward_payload forward_amount is_ref? custom_payload req
    OVER	//  forward_payload forward_amount is_ref? custom_payload req custom_payload
    ISNULL	//  forward_payload forward_amount is_ref? custom_payload req _12
    IF:<{	//  forward_payload forward_amount is_ref? custom_payload req
      0 PUSHINT
      s2 POP	//  forward_payload forward_amount is_ref? _13=0 req
      1 STU	//  forward_payload forward_amount is_ref? req
    }>ELSE<{	//  forward_payload forward_amount is_ref? custom_payload req
      1 PUSHINT	//  forward_payload forward_amount is_ref? custom_payload req _16=1
      SWAP	//  forward_payload forward_amount is_ref? custom_payload _16=1 req
      1 STU	//  forward_payload forward_amount is_ref? custom_payload _18
      STREF	//  forward_payload forward_amount is_ref? req
    }>
    ROT	//  forward_payload is_ref? req forward_amount
    STGRAMS	//  forward_payload is_ref? req
    s2 PUSH	//  forward_payload is_ref? req forward_payload
    ISNULL	//  forward_payload is_ref? req _21
    NOT	//  forward_payload is_ref? req _22
    IF:<{	//  forward_payload is_ref? req
      SWAP	//  forward_payload req is_ref?
      IF:<{	//  forward_payload req
        1 PUSHINT	//  forward_payload req _23=1
        SWAP	//  forward_payload _23=1 req
        1 STU	//  forward_payload _25
        STREF	//  req
      }>ELSE<{	//  forward_payload req
        0 PUSHINT	//  forward_payload req _27=0
        SWAP	//  forward_payload _27=0 req
        1 STU	//  forward_payload _29
        SWAP	//  _29 forward_payload
        CTOS	//  _29 _30
        STSLICER	//  req
      }>
    }>ELSE<{	//  forward_payload is_ref? req
      NIP
      0 PUSHINT
      s2 POP	//  _32=0 req
      1 STU	//  req
    }>
  }>
  generate_nft_get_static_data_request PROC:<{
    //  query_id
    801842850 PUSHINT	//  query_id _1=801842850
    NEWC	//  query_id _1=801842850 _2
    32 STU	//  query_id _4
    64 STU	//  _6
  }>
  generate_nft_deploy_request PROC:<{
    //  idx content query_id forward_amount
    1 PUSHINT
    ROT	//  idx content forward_amount _4=1 query_id
    generate_internal_message_body CALLDICT	//  idx content forward_amount _5
    s1 s3 XCHG	//  forward_amount content idx _5
    64 STU	//  forward_amount content _7
    ROT	//  content _7 forward_amount
    STGRAMS	//  content _8
    STREF	//  _9
  }>
  generate_jetton_burn_request PROC:<{
    //  query_id amount dst custom_payload
    1499400124 PUSHINT	//  query_id amount dst custom_payload _5=1499400124
    s0 s4 XCHG2	//  custom_payload amount dst _5=1499400124 query_id
    generate_internal_message_body CALLDICT	//  custom_payload amount dst _6
    ROT	//  custom_payload dst _6 amount
    STGRAMS	//  custom_payload dst _7
    SWAP	//  custom_payload _7 dst
    STSLICER	//  custom_payload burn_msg
    OVER	//  custom_payload burn_msg custom_payload
    ISNULL	//  custom_payload burn_msg _9
    NOT	//  custom_payload burn_msg _10
    IF:<{	//  custom_payload burn_msg
      1 PUSHINT	//  custom_payload burn_msg _11=1
      SWAP	//  custom_payload _11=1 burn_msg
      1 STU	//  custom_payload _13
      STREF	//  burn_msg
    }>ELSE<{	//  custom_payload burn_msg
      0 PUSHINT
      s2 POP	//  _15=0 burn_msg
      1 STU	//  burn_msg
    }>
  }>
  generate_jetton_burn_notification PROC:<{
    //  query_id amount sender resp_dst
    2078119902 PUSHINT	//  query_id amount sender resp_dst _4=2078119902
    s0 s4 XCHG2	//  resp_dst amount sender _4=2078119902 query_id
    generate_internal_message_body CALLDICT	//  resp_dst amount sender _5
    ROT	//  resp_dst sender _5 amount
    STGRAMS	//  resp_dst sender _6
    SWAP	//  resp_dst _6 sender
    STSLICER	//  resp_dst _7
    SWAP	//  _7 resp_dst
    STSLICER	//  _8
  }>
  generate_jetton_internal_transfer_request PROC:<{
    //  query_id amount from resp_addr forward_amount forward_payload is_ref?
    395134233 PUSHINT	//  query_id amount from resp_addr forward_amount forward_payload is_ref? _8=395134233
    s0 s7 XCHG2	//  is_ref? amount from resp_addr forward_amount forward_payload _8=395134233 query_id
    generate_internal_message_body CALLDICT	//  is_ref? amount from resp_addr forward_amount forward_payload _9
    s0 s5 XCHG2	//  is_ref? forward_payload from resp_addr forward_amount _9 amount
    STGRAMS	//  is_ref? forward_payload from resp_addr forward_amount _10
    s0 s3 XCHG2	//  is_ref? forward_payload forward_amount resp_addr _10 from
    STSLICER	//  is_ref? forward_payload forward_amount resp_addr _11
    SWAP	//  is_ref? forward_payload forward_amount _11 resp_addr
    STSLICER	//  is_ref? forward_payload forward_amount _12
    SWAP	//  is_ref? forward_payload _12 forward_amount
    STGRAMS	//  is_ref? forward_payload req
    OVER	//  is_ref? forward_payload req forward_payload
    ISNULL	//  is_ref? forward_payload req _14
    NOT	//  is_ref? forward_payload req _15
    IF:<{	//  is_ref? forward_payload req
      s0 s2 XCHG	//  req forward_payload is_ref?
      IF:<{	//  req forward_payload
        1 PUSHINT
        ROT	//  forward_payload _16=1 req
        1 STU	//  forward_payload _18
        STREF	//  req
      }>ELSE<{	//  req forward_payload
        0 PUSHINT
        ROT	//  forward_payload _20=0 req
        1 STU	//  forward_payload _22
        SWAP	//  _22 forward_payload
        CTOS	//  _22 _23
        STSLICER	//  req
      }>
    }>ELSE<{	//  is_ref? forward_payload req
      NIP
      0 PUSHINT
      s2 POP	//  _25=0 req
      1 STU	//  req
    }>
  }>
  generate_jetton_transfer_request PROC:<{
    //  query_id amount dst resp_dst custom_payload forward_amount forward_payload is_ref?
    260734629 PUSHINT	//  query_id amount dst resp_dst custom_payload forward_amount forward_payload is_ref? _9=260734629
    s0 s8 XCHG2	//  is_ref? amount dst resp_dst custom_payload forward_amount forward_payload _9=260734629 query_id
    generate_internal_message_body CALLDICT	//  is_ref? amount dst resp_dst custom_payload forward_amount forward_payload _10
    s0 s6 XCHG2	//  is_ref? forward_payload dst resp_dst custom_payload forward_amount _10 amount
    STGRAMS	//  is_ref? forward_payload dst resp_dst custom_payload forward_amount _11
    s0 s4 XCHG2	//  is_ref? forward_payload forward_amount resp_dst custom_payload _11 dst
    STSLICER	//  is_ref? forward_payload forward_amount resp_dst custom_payload _12
    ROT	//  is_ref? forward_payload forward_amount custom_payload _12 resp_dst
    STSLICER	//  is_ref? forward_payload forward_amount custom_payload req
    OVER	//  is_ref? forward_payload forward_amount custom_payload req custom_payload
    ISNULL	//  is_ref? forward_payload forward_amount custom_payload req _14
    IF:<{	//  is_ref? forward_payload forward_amount custom_payload req
      0 PUSHINT
      s2 POP	//  is_ref? forward_payload forward_amount _15=0 req
      1 STU	//  is_ref? forward_payload forward_amount req
    }>ELSE<{	//  is_ref? forward_payload forward_amount custom_payload req
      1 PUSHINT	//  is_ref? forward_payload forward_amount custom_payload req _18=1
      SWAP	//  is_ref? forward_payload forward_amount custom_payload _18=1 req
      1 STU	//  is_ref? forward_payload forward_amount custom_payload _20
      STREF	//  is_ref? forward_payload forward_amount req
    }>
    SWAP	//  is_ref? forward_payload req forward_amount
    STGRAMS	//  is_ref? forward_payload req
    OVER	//  is_ref? forward_payload req forward_payload
    ISNULL	//  is_ref? forward_payload req _23
    NOT	//  is_ref? forward_payload req _24
    IF:<{	//  is_ref? forward_payload req
      s0 s2 XCHG	//  req forward_payload is_ref?
      IF:<{	//  req forward_payload
        1 PUSHINT
        ROT	//  forward_payload _25=1 req
        1 STU	//  forward_payload _27
        STREF	//  req
      }>ELSE<{	//  req forward_payload
        0 PUSHINT
        ROT	//  forward_payload _29=0 req
        1 STU	//  forward_payload _31
        SWAP	//  _31 forward_payload
        CTOS	//  _31 _32
        STSLICER	//  req
      }>
    }>ELSE<{	//  is_ref? forward_payload req
      NIP
      0 PUSHINT
      s2 POP	//  _34=0 req
      1 STU	//  req
    }>
  }>
  generate_internal_message PROC:<{
    //  bounce ton_amount init_state payload
    generate_internal_address CALLDICT	//  bounce ton_amount init_state payload ssrc
    generate_internal_address CALLDICT	//  bounce ton_amount init_state payload ssrc sdest
    1000 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _9=1000
    DUP	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000
    PUSHNULL	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11
    0 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0
    s0 s0 PUSH2	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _13=0 _14=0
    NEWC	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _13=0 _14=0 _15
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _13=0 _17
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _12=0 _19
    s1 s10 XCHG	//  _12=0 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 bounce _19
    1 STU	//  _12=0 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _11 _21
    s1 s9 XCHG	//  _11 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _12=0 _21
    1 STU	//  _11 ton_amount init_state payload ssrc sdest _9=1000 _10=1000 _23
    s0 s4 XCHG2	//  _11 ton_amount init_state payload _10=1000 sdest _9=1000 _23 ssrc
    STSLICER	//  _11 ton_amount init_state payload _10=1000 sdest _9=1000 _24
    ROT	//  _11 ton_amount init_state payload _10=1000 _9=1000 _24 sdest
    STSLICER	//  _11 ton_amount init_state payload _10=1000 _9=1000 _25
    s0 s5 XCHG2	//  _11 _9=1000 init_state payload _10=1000 _25 ton_amount
    STGRAMS	//  _11 _9=1000 init_state payload _10=1000 _26
    s1 s5 XCHG	//  _10=1000 _9=1000 init_state payload _11 _26
    STDICT	//  _10=1000 _9=1000 init_state payload _27
    0 PUSHINT	//  _10=1000 _9=1000 init_state payload _27 _28=0
    STGRAMS	//  _10=1000 _9=1000 init_state payload _29
    0 PUSHINT	//  _10=1000 _9=1000 init_state payload _29 _30=0
    STGRAMS	//  _10=1000 _9=1000 init_state payload _31
    s1 s4 XCHG	//  payload _9=1000 init_state _10=1000 _31
    64 STU	//  payload _9=1000 init_state _33
    s1 s2 XCHG	//  payload init_state _9=1000 _33
    32 STU	//  payload init_state _35
    s1 s(-1) PUXC	//  payload init_state init_state _35
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _39
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _42
      OVER	//  payload msg init_state_builder _42 init_state_builder
      BBITS	//  payload msg init_state_builder _42 _43
      ADD	//  payload msg init_state_builder _44
      10 PUSHPOW2DEC	//  payload msg init_state_builder _44 _45=1023
      GEQ	//  payload msg init_state_builder _46
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _47
        1 PUSHINT
        ROT	//  payload _47 _48=1 msg
        1 STU	//  payload _47 _50
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _52=0 msg
        1 STU	//  payload init_state_builder _54
        SWAP	//  payload _54 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _56
    s2 PUSH	//  payload msg _56 payload
    BBITS	//  payload msg _56 _57
    ADD	//  payload msg _58
    10 PUSHPOW2DEC	//  payload msg _58 _59=1023
    GEQ	//  payload msg _60
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _61
      1 PUSHINT
      ROT	//  _61 _62=1 msg
      1 STU	//  _61 _64
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _66=0
      SWAP	//  payload _66=0 msg
      1 STU	//  payload _68
      SWAP	//  _68 payload
      STBR	//  msg
    }>
    ENDC	//  _70
  }>
  generate_internal_message_relaxed PROC:<{
    //  bounce ton_amount init_state payload typeOfAnyAddress
    generate_any_address CALLDICT	//  bounce ton_amount init_state payload ssrc
    generate_internal_address CALLDICT	//  bounce ton_amount init_state payload ssrc sdest
    1000 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _10=1000
    DUP	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000
    PUSHNULL	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12
    0 PUSHINT	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0
    s0 s0 PUSH2	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _14=0 _15=0
    NEWC	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _14=0 _15=0 _16
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _14=0 _18
    1 STU	//  bounce ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _13=0 _20
    s1 s10 XCHG	//  _13=0 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 bounce _20
    1 STU	//  _13=0 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _12 _22
    s1 s9 XCHG	//  _12 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _13=0 _22
    1 STU	//  _12 ton_amount init_state payload ssrc sdest _10=1000 _11=1000 _24
    s0 s4 XCHG2	//  _12 ton_amount init_state payload _11=1000 sdest _10=1000 _24 ssrc
    STSLICER	//  _12 ton_amount init_state payload _11=1000 sdest _10=1000 _25
    ROT	//  _12 ton_amount init_state payload _11=1000 _10=1000 _25 sdest
    STSLICER	//  _12 ton_amount init_state payload _11=1000 _10=1000 _26
    s0 s5 XCHG2	//  _12 _10=1000 init_state payload _11=1000 _26 ton_amount
    STGRAMS	//  _12 _10=1000 init_state payload _11=1000 _27
    s1 s5 XCHG	//  _11=1000 _10=1000 init_state payload _12 _27
    STDICT	//  _11=1000 _10=1000 init_state payload _28
    0 PUSHINT	//  _11=1000 _10=1000 init_state payload _28 _29=0
    STGRAMS	//  _11=1000 _10=1000 init_state payload _30
    0 PUSHINT	//  _11=1000 _10=1000 init_state payload _30 _31=0
    STGRAMS	//  _11=1000 _10=1000 init_state payload _32
    s1 s4 XCHG	//  payload _10=1000 init_state _11=1000 _32
    64 STU	//  payload _10=1000 init_state _34
    s1 s2 XCHG	//  payload init_state _10=1000 _34
    32 STU	//  payload init_state _36
    s1 s(-1) PUXC	//  payload init_state init_state _36
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _40
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _43
      OVER	//  payload msg init_state_builder _43 init_state_builder
      BBITS	//  payload msg init_state_builder _43 _44
      ADD	//  payload msg init_state_builder _45
      10 PUSHPOW2DEC	//  payload msg init_state_builder _45 _46=1023
      GEQ	//  payload msg init_state_builder _47
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _48
        1 PUSHINT
        ROT	//  payload _48 _49=1 msg
        1 STU	//  payload _48 _51
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _53=0 msg
        1 STU	//  payload init_state_builder _55
        SWAP	//  payload _55 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _57
    s2 PUSH	//  payload msg _57 payload
    BBITS	//  payload msg _57 _58
    ADD	//  payload msg _59
    10 PUSHPOW2DEC	//  payload msg _59 _60=1023
    GEQ	//  payload msg _61
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _62
      1 PUSHINT
      ROT	//  _62 _63=1 msg
      1 STU	//  _62 _65
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _67=0
      SWAP	//  payload _67=0 msg
      1 STU	//  payload _69
      SWAP	//  _69 payload
      STBR	//  msg
    }>
    ENDC	//  _71
  }>
  generate_external_in_message PROC:<{
    //  import_fee init_state payload
    8 PUSHPOW2	//  import_fee init_state payload _4=256
    generate_external_address CALLDICT	//  import_fee init_state payload ssrc
    generate_internal_address CALLDICT	//  import_fee init_state payload ssrc sdest
    2 PUSHINT	//  import_fee init_state payload ssrc sdest _9=2
    NEWC	//  import_fee init_state payload ssrc sdest _9=2 _10
    2 STU	//  import_fee init_state payload ssrc sdest _12
    ROT	//  import_fee init_state payload sdest _12 ssrc
    STSLICER	//  import_fee init_state payload sdest _13
    SWAP	//  import_fee init_state payload _13 sdest
    STSLICER	//  import_fee init_state payload _14
    s0 s3 XCHG2	//  payload init_state _14 import_fee
    STGRAMS	//  payload init_state _15
    s1 s(-1) PUXC	//  payload init_state init_state _15
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _19
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _22
      OVER	//  payload msg init_state_builder _22 init_state_builder
      BBITS	//  payload msg init_state_builder _22 _23
      ADD	//  payload msg init_state_builder _24
      10 PUSHPOW2DEC	//  payload msg init_state_builder _24 _25=1023
      GEQ	//  payload msg init_state_builder _26
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _27
        1 PUSHINT
        ROT	//  payload _27 _28=1 msg
        1 STU	//  payload _27 _30
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _32=0 msg
        1 STU	//  payload init_state_builder _34
        SWAP	//  payload _34 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _36
    s2 PUSH	//  payload msg _36 payload
    BBITS	//  payload msg _36 _37
    ADD	//  payload msg _38
    10 PUSHPOW2DEC	//  payload msg _38 _39=1023
    GREATER	//  payload msg _40
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _41
      1 PUSHINT
      ROT	//  _41 _42=1 msg
      1 STU	//  _41 _44
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _46=0
      SWAP	//  payload _46=0 msg
      1 STU	//  payload _48
      SWAP	//  _48 payload
      STBR	//  msg
    }>
    ENDC	//  _50
  }>
  generate_external_in_message_with_empty_source_address PROC:<{
    //  import_fee init_state payload
    generate_empty_address CALLDICT	//  import_fee init_state payload ssrc
    generate_internal_address CALLDICT	//  import_fee init_state payload ssrc sdest
    2 PUSHINT	//  import_fee init_state payload ssrc sdest _8=2
    NEWC	//  import_fee init_state payload ssrc sdest _8=2 _9
    2 STU	//  import_fee init_state payload ssrc sdest _11
    ROT	//  import_fee init_state payload sdest _11 ssrc
    STSLICER	//  import_fee init_state payload sdest _12
    SWAP	//  import_fee init_state payload _12 sdest
    STSLICER	//  import_fee init_state payload _13
    s0 s3 XCHG2	//  payload init_state _13 import_fee
    STGRAMS	//  payload init_state _14
    s1 s(-1) PUXC	//  payload init_state init_state _14
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _18
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _21
      OVER	//  payload msg init_state_builder _21 init_state_builder
      BBITS	//  payload msg init_state_builder _21 _22
      ADD	//  payload msg init_state_builder _23
      10 PUSHPOW2DEC	//  payload msg init_state_builder _23 _24=1023
      GEQ	//  payload msg init_state_builder _25
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _26
        1 PUSHINT
        ROT	//  payload _26 _27=1 msg
        1 STU	//  payload _26 _29
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _31=0 msg
        1 STU	//  payload init_state_builder _33
        SWAP	//  payload _33 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _35
    s2 PUSH	//  payload msg _35 payload
    BBITS	//  payload msg _35 _36
    ADD	//  payload msg _37
    10 PUSHPOW2DEC	//  payload msg _37 _38=1023
    GEQ	//  payload msg _39
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _40
      1 PUSHINT
      ROT	//  _40 _41=1 msg
      1 STU	//  _40 _43
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _45=0
      SWAP	//  payload _45=0 msg
      1 STU	//  payload _47
      SWAP	//  _47 payload
      STBR	//  msg
    }>
    ENDC	//  _49
  }>
  generate_external_out_message PROC:<{
    //  import_fee init_state payload
    s2 POP	//  payload init_state
    generate_internal_address CALLDICT	//  payload init_state ssrc
    8 PUSHPOW2	//  payload init_state ssrc _6=256
    generate_external_address CALLDICT	//  payload init_state ssrc sdest
    1000 PUSHINT	//  payload init_state ssrc sdest _9=1000
    DUP	//  payload init_state ssrc sdest _9=1000 _10=1000
    3 PUSHINT	//  payload init_state ssrc sdest _9=1000 _10=1000 _11=3
    NEWC	//  payload init_state ssrc sdest _9=1000 _10=1000 _11=3 _12
    2 STU	//  payload init_state ssrc sdest _9=1000 _10=1000 _14
    s0 s4 XCHG2	//  payload init_state _10=1000 sdest _9=1000 _14 ssrc
    STSLICER	//  payload init_state _10=1000 sdest _9=1000 _15
    ROT	//  payload init_state _10=1000 _9=1000 _15 sdest
    STSLICER	//  payload init_state _10=1000 _9=1000 _16
    s1 s2 XCHG	//  payload init_state _9=1000 _10=1000 _16
    64 STU	//  payload init_state _9=1000 _18
    32 STU	//  payload init_state _20
    s1 s(-1) PUXC	//  payload init_state init_state _20
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _24
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _27
      OVER	//  payload msg init_state_builder _27 init_state_builder
      BBITS	//  payload msg init_state_builder _27 _28
      ADD	//  payload msg init_state_builder _29
      10 PUSHPOW2DEC	//  payload msg init_state_builder _29 _30=1023
      GEQ	//  payload msg init_state_builder _31
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _32
        1 PUSHINT
        ROT	//  payload _32 _33=1 msg
        1 STU	//  payload _32 _35
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _37=0 msg
        1 STU	//  payload init_state_builder _39
        SWAP	//  payload _39 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _41
    s2 PUSH	//  payload msg _41 payload
    BBITS	//  payload msg _41 _42
    ADD	//  payload msg _43
    10 PUSHPOW2DEC	//  payload msg _43 _44=1023
    GEQ	//  payload msg _45
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _46
      1 PUSHINT
      ROT	//  _46 _47=1 msg
      1 STU	//  _46 _49
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _51=0
      SWAP	//  payload _51=0 msg
      1 STU	//  payload _53
      SWAP	//  _53 payload
      STBR	//  msg
    }>
    ENDC	//  _55
  }>
  generate_external_out_message_with_empty_destination_address PROC:<{
    //  import_fee init_state payload
    s2 POP	//  payload init_state
    generate_internal_address CALLDICT	//  payload init_state ssrc
    generate_empty_address CALLDICT	//  payload init_state ssrc sdest
    1000 PUSHINT	//  payload init_state ssrc sdest _8=1000
    DUP	//  payload init_state ssrc sdest _8=1000 _9=1000
    3 PUSHINT	//  payload init_state ssrc sdest _8=1000 _9=1000 _10=3
    NEWC	//  payload init_state ssrc sdest _8=1000 _9=1000 _10=3 _11
    2 STU	//  payload init_state ssrc sdest _8=1000 _9=1000 _13
    s0 s4 XCHG2	//  payload init_state _9=1000 sdest _8=1000 _13 ssrc
    STSLICER	//  payload init_state _9=1000 sdest _8=1000 _14
    ROT	//  payload init_state _9=1000 _8=1000 _14 sdest
    STSLICER	//  payload init_state _9=1000 _8=1000 _15
    s1 s2 XCHG	//  payload init_state _8=1000 _9=1000 _15
    64 STU	//  payload init_state _8=1000 _17
    32 STU	//  payload init_state _19
    s1 s(-1) PUXC	//  payload init_state init_state _19
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _23
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _26
      OVER	//  payload msg init_state_builder _26 init_state_builder
      BBITS	//  payload msg init_state_builder _26 _27
      ADD	//  payload msg init_state_builder _28
      10 PUSHPOW2DEC	//  payload msg init_state_builder _28 _29=1023
      GEQ	//  payload msg init_state_builder _30
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _31
        1 PUSHINT
        ROT	//  payload _31 _32=1 msg
        1 STU	//  payload _31 _34
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _36=0 msg
        1 STU	//  payload init_state_builder _38
        SWAP	//  payload _38 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _40
    s2 PUSH	//  payload msg _40 payload
    BBITS	//  payload msg _40 _41
    ADD	//  payload msg _42
    10 PUSHPOW2DEC	//  payload msg _42 _43=1023
    GEQ	//  payload msg _44
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _45
      1 PUSHINT
      ROT	//  _45 _46=1 msg
      1 STU	//  _45 _48
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _50=0
      SWAP	//  payload _50=0 msg
      1 STU	//  payload _52
      SWAP	//  _52 payload
      STBR	//  msg
    }>
    ENDC	//  _54
  }>
  generate_external_out_message_relaxed PROC:<{
    //  ton_amount init_state payload typeOfAnyAddress
    s3 POP	//  typeOfAnyAddress init_state payload
    s0 s2 XCHG	//  payload init_state typeOfAnyAddress
    generate_any_address CALLDICT	//  payload init_state ssrc
    8 PUSHPOW2	//  payload init_state ssrc _7=256
    generate_external_address CALLDICT	//  payload init_state ssrc sdest
    1000 PUSHINT	//  payload init_state ssrc sdest _10=1000
    DUP	//  payload init_state ssrc sdest _10=1000 _11=1000
    3 PUSHINT	//  payload init_state ssrc sdest _10=1000 _11=1000 _12=3
    NEWC	//  payload init_state ssrc sdest _10=1000 _11=1000 _12=3 _13
    2 STU	//  payload init_state ssrc sdest _10=1000 _11=1000 _15
    s0 s4 XCHG2	//  payload init_state _11=1000 sdest _10=1000 _15 ssrc
    STSLICER	//  payload init_state _11=1000 sdest _10=1000 _16
    ROT	//  payload init_state _11=1000 _10=1000 _16 sdest
    STSLICER	//  payload init_state _11=1000 _10=1000 _17
    s1 s2 XCHG	//  payload init_state _10=1000 _11=1000 _17
    64 STU	//  payload init_state _10=1000 _19
    32 STU	//  payload init_state _21
    s1 s(-1) PUXC	//  payload init_state init_state _21
    1 STU	//  payload init_state msg
    SWAP	//  payload msg init_state
    1 EQINT	//  payload msg _25
    IF:<{	//  payload msg
      generate_init_state CALLDICT	//  payload msg init_state_builder
      OVER	//  payload msg init_state_builder msg
      BBITS	//  payload msg init_state_builder _28
      OVER	//  payload msg init_state_builder _28 init_state_builder
      BBITS	//  payload msg init_state_builder _28 _29
      ADD	//  payload msg init_state_builder _30
      10 PUSHPOW2DEC	//  payload msg init_state_builder _30 _31=1023
      GEQ	//  payload msg init_state_builder _32
      IF:<{	//  payload msg init_state_builder
        ENDC	//  payload msg _33
        1 PUSHINT
        ROT	//  payload _33 _34=1 msg
        1 STU	//  payload _33 _36
        STREF	//  payload msg
      }>ELSE<{	//  payload msg init_state_builder
        0 PUSHINT
        ROT	//  payload init_state_builder _38=0 msg
        1 STU	//  payload init_state_builder _40
        SWAP	//  payload _40 init_state_builder
        STBR	//  payload msg
      }>
    }>	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _42
    s2 PUSH	//  payload msg _42 payload
    BBITS	//  payload msg _42 _43
    ADD	//  payload msg _44
    10 PUSHPOW2DEC	//  payload msg _44 _45=1023
    GEQ	//  payload msg _46
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _47
      1 PUSHINT
      ROT	//  _47 _48=1 msg
      1 STU	//  _47 _50
      STREF	//  msg
    }>ELSE<{	//  payload msg
      0 PUSHINT	//  payload msg _52=0
      SWAP	//  payload _52=0 msg
      1 STU	//  payload _54
      SWAP	//  _54 payload
      STBR	//  msg
    }>
    ENDC	//  _56
  }>
  parse_internal_message PROC:<{
    //  message
    CTOS	//  cs
    112 PUSHINT	//  cs _3
    SWAP	//  _3 cs
    1 LDU	//  _3 _4 cs
    SWAP	//  _3 cs _4
    0 NEQINT	//  _3 cs _8
    s1 s2 XCHG	//  cs _3 _8
    THROWANYIF
    1 LDU	//  ihr_disabled cs
    1 LDU	//  ihr_disabled bounce cs
    1 LDU	//  ihr_disabled bounce bounced cs
    LDMSGADDR	//  ihr_disabled bounce bounced src cs
    LDMSGADDR	//  ihr_disabled bounce bounced src to_address cs
    LDVARUINT16	//  ihr_disabled bounce bounced src to_address money cs
    LDDICT	//  ihr_disabled bounce bounced src to_address money _86 _85
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced src to_address money _88 _87
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced src to_address money _90 _89
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    96 LDU	//  ihr_disabled bounce bounced src to_address money timestamps cs
    1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps maybe_init_state cs
    NIL	//  ihr_disabled bounce bounced src to_address money timestamps maybe_init_state cs init_state
    s0 s2 XCHG	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs maybe_init_state
    1 EQINT	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs _50
    IF:<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
      NIP	//  ihr_disabled bounce bounced src to_address money timestamps cs
      1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps _51 cs
      SWAP	//  ihr_disabled bounce bounced src to_address money timestamps cs _51
      IF:<{	//  ihr_disabled bounce bounced src to_address money timestamps cs
        LDREF	//  ihr_disabled bounce bounced src to_address money timestamps _54 cs
        SWAP	//  ihr_disabled bounce bounced src to_address money timestamps cs _54
        CTOS	//  ihr_disabled bounce bounced src to_address money timestamps cs _56
        parse_init_state CALLDICT	//  ihr_disabled bounce bounced src to_address money timestamps cs init_state
      }>ELSE<{	//  ihr_disabled bounce bounced src to_address money timestamps cs
        DUP	//  ihr_disabled bounce bounced src to_address money timestamps cs cs
        parse_init_state CALLDICT	//  ihr_disabled bounce bounced src to_address money timestamps cs init_state
      }>
      SWAP	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
    }>	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
    1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps init_state body_flag cs
    SWAP	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs body_flag
    0 EQINT	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs _66
    IF:<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state body
    }>ELSE<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
      LDREF	//  ihr_disabled bounce bounced src to_address money timestamps init_state _102 _101
      DROP	//  ihr_disabled bounce bounced src to_address money timestamps init_state _67
      CTOS	//  ihr_disabled bounce bounced src to_address money timestamps init_state body
    }>
    9 TUPLE	//  _70
  }>
  parse_external_message PROC:<{
    //  message
    CTOS	//  cs
    2 LDU	//  msg_info cs
    113 PUSHINT	//  msg_info cs _7
    s2 PUSH	//  msg_info cs _7 msg_info
    2 NEQINT	//  msg_info cs _7 _9
    s3 PUSH	//  msg_info cs _7 _9 msg_info
    3 NEQINT	//  msg_info cs _7 _9 _11
    AND	//  msg_info cs _7 _12
    THROWANYIF
    LDMSGADDR	//  msg_info src cs
    LDMSGADDR	//  msg_info src to_address cs
    0 PUSHINT	//  msg_info src to_address cs import_fee=0
    s0 s4 PUXC	//  timestamps=0 src to_address cs import_fee=0 msg_info
    2 EQINT	//  timestamps=0 src to_address cs import_fee=0 _25
    IF:<{	//  timestamps=0 src to_address cs import_fee=0
      DROP	//  timestamps=0 src to_address cs
      LDGRAMS	//  timestamps=0 src to_address import_fee cs
    }>ELSE<{	//  timestamps=0 src to_address cs import_fee=0
      s4 POP	//  import_fee=0 src to_address cs
      96 LDU	//  import_fee=0 src to_address timestamps cs
      s1 s4 XCHG	//  timestamps src to_address import_fee cs
    }>
    1 LDU	//  timestamps src to_address import_fee maybe_init_state cs
    NIL	//  timestamps src to_address import_fee maybe_init_state cs init_state
    s0 s2 XCHG	//  timestamps src to_address import_fee init_state cs maybe_init_state
    1 EQINT	//  timestamps src to_address import_fee init_state cs _38
    IF:<{	//  timestamps src to_address import_fee init_state cs
      NIP	//  timestamps src to_address import_fee cs
      DUP	//  timestamps src to_address import_fee cs cs
      parse_init_state CALLDICT	//  timestamps src to_address import_fee cs init_state
      SWAP	//  timestamps src to_address import_fee init_state cs
    }>	//  timestamps src to_address import_fee init_state cs
    1 LDU	//  timestamps src to_address import_fee init_state body_flag cs
    SWAP	//  timestamps src to_address import_fee init_state cs body_flag
    0 EQINT	//  timestamps src to_address import_fee init_state cs _47
    IF:<{	//  timestamps src to_address import_fee init_state body
    }>ELSE<{	//  timestamps src to_address import_fee init_state cs
      LDREF	//  timestamps src to_address import_fee init_state _67 _66
      DROP	//  timestamps src to_address import_fee init_state _48
      CTOS	//  timestamps src to_address import_fee init_state body
    }>
    s4 s5 XCHG
    s3 s4 XCHG
    s2 s3 XCHG	//  src to_address import_fee timestamps init_state body
    6 TUPLE	//  _51
  }>
  init_environment PROC:<{
    // 
    PUSHNULL	//  _0
    NEWC	//  _0 _1
    STDICT	//  _2
    ENDC	//  _3
    c4 POP
  }>
  storage_key PROC:<{
    //  tag
    2824609491042946229920590003095732224 PUSHINTX	//  tag _3
    SWAP	//  _3 tag
    ADD	//  _4
  }>
  load_storage_with_tag PROC:<{
    //  tag
    storage_key CALLDICT	//  _1
    c4 PUSH	//  _1 _2
    CTOS	//  _1 _3
    PLDDICT	//  _1 _4
    8 PUSHPOW2	//  _1 _4 _5=256
    DICTIGETOPTREF	//  _6
  }>
  save_storage_with_tag PROC:<{
    //  tag storage
    c4 PUSH	//  tag storage _3
    CTOS	//  tag storage _4
    PLDDICT	//  tag storage dict
    s0 s2 XCHG	//  dict storage tag
    storage_key CALLDICT	//  dict storage _7
    ROT
    8 PUSHPOW2	//  storage _7 dict _8=256
    DICTISETREF	//  dict
    NEWC	//  dict _10
    STDICT	//  _11
    ENDC	//  _12
    c4 POP
  }>
  get_c7 PROCINLINE:<{
    // 
    124711402 PUSHINT	//  _2=124711402
    0 PUSHINT	//  _2=124711402 _3=0
    DUP	//  _2=124711402 _3=0 _4=0
    NOW	//  _2=124711402 _3=0 _4=0 _5
    1 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1
    DUP	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1
    239 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239
    1000000000 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000
    PUSHNULL	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000 _11
    PAIR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12
    MYADDR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13
    CONFIGROOT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13 _14
    10 TUPLE	//  _15
    SINGLE	//  _16
  }>
  invoke_method PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  exit_code gas_used return_values
    s2 PUSH	//  exit_code gas_used return_values exit_code
    0 NEQINT	//  exit_code gas_used return_values _7
    s3 PUSH	//  exit_code gas_used return_values _7 exit_code
    1 NEQINT	//  exit_code gas_used return_values _7 _9
    AND	//  exit_code gas_used return_values _10
    s1 s3 XCHG	//  return_values gas_used exit_code _10
    THROWANYIF
    SWAP	//  gas_used return_values
  }>
  invoke_method_expect_fail PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  _13 _14 _15
    DROP	//  exit_code gas_used
    OVER	//  exit_code gas_used exit_code
    0 EQINT	//  exit_code gas_used _8
    s0 s2 XCHG	//  _8 gas_used exit_code
    1 EQINT	//  _8 gas_used _10
    s1 s2 XCHG	//  gas_used _8 _10
    OR	//  gas_used _11
    201 THROWIF
  }>
  assert_no_actions PROCINLINE:<{
    // 
    c5 PUSH CTOS	//  _1
    SEMPTY	//  _2
    NOT	//  _3
    202 THROWIF
  }>
  token_snake_len PROCINLINE:<{
    //  content
    0 PUSHINT	//  content len=0
    WHILE:<{
      OVER	//  content len content
      ISNULL	//  content len _3
      NOT	//  content len _4
    }>DO<{	//  content len
      OVER	//  content len content
      SBITS	//  content len _5
      ADD	//  content len
      OVER	//  content len content
      SREFS	//  content len _7
      IF:<{	//  content len
        SWAP	//  len content
        LDREF	//  len _14 _13
        DROP	//  len _9
        CTOS	//  len _8
      }>ELSE<{	//  content len
        NIP	//  len
        PUSHNULL	//  len _8
      }>	//  len content
      SWAP	//  content len
    }>	//  content len
    NIP	//  len
  }>
  get_snake_tail PROCINLINE:<{
    //  tail
    WHILE:<{
      DUP	//  tail tail
      ISNULL	//  tail _1
      NOT	//  tail _2
    }>DO<{	//  tail
      CTOS	//  tail_slice
      DUP	//  tail_slice tail_slice
      SREFS	//  tail_slice _5
      IF:<{	//  tail_slice
        LDREF	//  _11 _10
        DROP	//  _6
      }>ELSE<{	//  tail_slice
        DROP	// 
        PUSHNULL	//  _6
      }>	//  tail
    }>	//  tail
  }>
  snake_concat PROC:<{
    //  head tail
    SWAP	//  tail head
    CTOS	//  tail head_sl
    NEWC	//  tail head_sl _5
    OVER	//  tail head_sl _5 head_sl
    SBITS	//  tail head_sl _5 _7
    s1 s2 XCHG	//  tail _5 head_sl _7
    LDSLICEX	//  tail _5 _6 head_sl
    -ROT	//  tail head_sl _5 _6
    STSLICER	//  tail head_sl snake
    OVER	//  tail head_sl snake head_sl
    SREFS	//  tail head_sl snake _10
    IF:<{	//  tail head_sl snake
      SWAP	//  tail snake head_sl
      LDREF	//  tail snake _20 _19
      DROP	//  tail snake _11
      ROT	//  snake _11 tail
      snake_concat CALLDICT	//  snake _13
      SWAP	//  _13 snake
      STREF	//  snake
    }>ELSE<{	//  tail head_sl snake
      NIP	//  tail snake
      STREF	//  snake
    }>
    ENDC	//  _16
  }>
  snake_concat_tagged PROCINLINE:<{
    //  tag head tail
    OVER	//  tag head tail head
    CTOS	//  tag head tail head_sl
    s0 s3 XCHG
    NEWC	//  head_sl head tail tag _6
    8 STU	//  head_sl head tail snake
    1015 PUSHINT	//  head_sl head tail snake lbits
    s4 PUSH	//  head_sl head tail snake lbits head_sl
    SBITS	//  head_sl head tail snake lbits _15
    SWAP	//  head_sl head tail snake _15 lbits
    GREATER	//  head_sl head tail snake _16
    IF:<{	//  head_sl head tail snake
      s3 POP	//  snake head tail
      snake_concat CALLDICT	//  snake _17
      SWAP	//  _17 snake
      STREF	//  _18
      ENDC	//  tagged
    }>ELSE<{	//  head_sl head tail snake
      s2 POP	//  head_sl snake tail
      s0 s2 XCHG	//  tail snake head_sl
      STSLICER	//  tail _20
      ENDC	//  tail _21
      SWAP	//  _21 tail
      snake_concat CALLDICT	//  tagged
    }>
  }>
  snake_equal? PROCINLINE:<{
    //  snake1 snake2
    TRUE	//  snake1 snake2 equal
    UNTIL:<{
      s2 PUSH	//  snake1 snake2 equal snake1
      SBITS	//  snake1 snake2 equal s1_data
      s2 PUSH	//  snake1 snake2 equal s1_data snake2
      SBITS	//  snake1 snake2 equal s1_data s2_data
      2DUP	//  snake1 snake2 equal s1_data s2_data s1_data s2_data
      LEQ	//  snake1 snake2 equal s1_data s2_data _8
      IF:<{	//  snake1 snake2 equal s1_data s2_data
        OVER	//  snake1 snake2 equal s1_data s2_data s1_data
        0 GTINT	//  snake1 snake2 equal s1_data s2_data _10
        IF:<{	//  snake1 snake2 equal s1_data s2_data
          s2 POP	//  snake1 snake2 s2_data s1_data
          s2 s2 XCPU	//  snake1 s1_data s2_data snake2 s1_data
          LDSLICEX	//  snake1 s1_data s2_data _11 snake2
          s4 s1 PUXC	//  snake1 s1_data s2_data snake2 snake1 _11
          SDEQ	//  snake1 s1_data s2_data snake2 equal
          2SWAP	//  snake1 snake2 equal s1_data s2_data
        }>	//  snake1 snake2 equal s1_data s2_data
        s4 PUSH	//  snake1 snake2 equal s1_data s2_data snake1
        SREFS	//  snake1 snake2 equal s1_data s2_data _14
        IF:<{	//  snake1 snake2 equal s1_data s2_data
          s0 s4 XCHG	//  s2_data snake2 equal s1_data snake1
          LDREF	//  s2_data snake2 equal s1_data _48 _47
          DROP	//  s2_data snake2 equal s1_data _16
          CTOS	//  s2_data snake2 equal s1_data _15
        }>ELSE<{	//  snake1 snake2 equal s1_data s2_data
          s4 POP	//  s2_data snake2 equal s1_data
          PUSHNULL	//  s2_data snake2 equal s1_data _15
        }>	//  s2_data snake2 equal s1_data snake1
        DUP	//  s2_data snake2 equal s1_data snake1 snake1
        ISNULL	//  s2_data snake2 equal s1_data snake1 _20
        s5 PUSH	//  s2_data snake2 equal s1_data snake1 _20 s2_data
        AND	//  s2_data snake2 equal s1_data snake1 _21
        s2 PUSH	//  s2_data snake2 equal s1_data snake1 _21 s1_data
        GREATER	//  s2_data snake2 equal s1_data snake1 _22
        IF:<{	//  s2_data snake2 equal s1_data snake1
          s4 POP
          2DROP	//  snake1 snake2
          FALSE	//  snake1 snake2 equal
        }>ELSE<{	//  s2_data snake2 equal s1_data snake1
          s4 s4 XCHG2	//  snake1 snake2 equal s2_data s1_data
          EQUAL	//  snake1 snake2 equal _24
          IF:<{	//  snake1 snake2 equal
            OVER	//  snake1 snake2 equal snake2
            SREFS	//  snake1 snake2 equal _25
            IF:<{	//  snake1 snake2 equal
              SWAP	//  snake1 equal snake2
              LDREF	//  snake1 equal _50 _49
              DROP	//  snake1 equal _27
              CTOS	//  snake1 equal _26
            }>ELSE<{	//  snake1 snake2 equal
              NIP	//  snake1 equal
              PUSHNULL	//  snake1 equal _26
            }>	//  snake1 equal snake2
            SWAP	//  snake1 snake2 equal
          }>	//  snake1 snake2 equal
        }>
      }>ELSE<{	//  snake1 snake2 equal s1_data s2_data
        2 1 BLKDROP2	//  snake1 snake2 s2_data
        s1 s2 XCHG	//  snake2 snake1 s2_data
        LDSLICEX	//  snake2 _31 snake1
        s2 s1 PUXC	//  snake2 snake1 snake2 _31
        SDEQ	//  snake2 snake1 equal
        s2 PUSH	//  snake2 snake1 equal snake2
        SREFS	//  snake2 snake1 equal _34
        IF:<{	//  snake2 snake1 equal
          s0 s2 XCHG	//  equal snake1 snake2
          LDREF	//  equal snake1 _54 _53
          DROP	//  equal snake1 _36
          CTOS	//  equal snake1 _35
        }>ELSE<{	//  snake2 snake1 equal
          s2 POP	//  equal snake1
          PUSHNULL	//  equal snake1 _35
        }>	//  equal snake1 snake2
        ROT	//  snake1 snake2 equal
      }>
      DUP	//  snake1 snake2 equal equal
      NOT	//  snake1 snake2 equal _40
      s3 PUSH	//  snake1 snake2 equal _40 snake1
      ISNULL	//  snake1 snake2 equal _40 _41
      s3 PUSH	//  snake1 snake2 equal _40 _41 snake2
      ISNULL	//  snake1 snake2 equal _40 _41 _42
      AND	//  snake1 snake2 equal _40 _43
      OR	//  snake1 snake2 equal _44
    }>	//  snake1 snake2 equal
    2 1 BLKDROP2	//  equal
  }>
  load_data PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    LDMSGADDR	//  _5 ds
    SWAP	//  ds _5
    manager_address SETGLOB
    256 LDU	//  _9 ds
    SWAP	//  ds _9
    public_key SETGLOB
    32 LDU	//  _13 ds
    SWAP	//  ds _13
    gseqno SETGLOB
    LDDICT	//  _24 _23
    DROP	//  _16
    ads SETGLOB
  }>
  save_data PROCREF:<{
    // 
    ads GETGLOB	//  _0
    gseqno GETGLOB	//  _0 _1
    public_key GETGLOB	//  _0 _1 _2
    NEWC	//  _0 _1 _2 _3
    manager_address GETGLOB	//  _0 _1 _2 _3 _4
    STSLICER	//  _0 _1 _2 _5
    256 STU	//  _0 _1 _7
    32 STU	//  _0 _9
    STDICT	//  _10
    ENDC	//  _11
    c4 POP
  }>
  recv_internal PROC:<{
    //  balance msg_value in_msg_full in_msg_body
    s3 POP
    NIP	//  in_msg_body in_msg_full
    CTOS	//  in_msg_body fm
    4 LDU	//  in_msg_body _186 _185
    NIP	//  in_msg_body fm
    LDMSGADDR	//  in_msg_body sender_address fm
    LDMSGADDR	//  in_msg_body sender_address _190 _189
    NIP	//  in_msg_body sender_address fm
    LDVARUINT16	//  in_msg_body sender_address _192 _191
    DROP	//  in_msg_body sender_address coins
    s0 s2 XCHG
    9 PUSHPOW2	//  coins sender_address in_msg_body _21=512
    LDSLICEX	//  coins sender_address signature in_msg_body
    DUP	//  coins sender_address signature cs2 cs
    load_data CALLDICT
    SWAP	//  coins sender_address signature cs cs2
    32 LDU	//  coins sender_address signature cs mseqno cs2
    5004 PUSHINT	//  coins sender_address signature cs mseqno cs2 _30=5004
    gseqno GETGLOB	//  coins sender_address signature cs mseqno cs2 _30=5004 _31
    s1 s3 XCHG	//  coins sender_address signature cs _30=5004 cs2 mseqno _31
    EQUAL	//  coins sender_address signature cs _30=5004 cs2 _32
    s1 s2 XCHG	//  coins sender_address signature cs cs2 _30=5004 _32
    THROWANYIFNOT
    32 LDU	//  coins sender_address signature cs _198 _197
    DROP	//  coins sender_address signature cs op
    SWAP	//  coins sender_address signature op cs
    HASHSU	//  coins sender_address signature op msg_hash
    5000 PUSHINT	//  coins sender_address signature op msg_hash _40=5000
    public_key GETGLOB	//  coins sender_address signature op msg_hash _40=5000 _41
    s1 s4 XCHG	//  coins sender_address _40=5000 op msg_hash signature _41
    CHKSIGNU	//  coins sender_address _40=5000 op _42
    s1 s2 XCHG	//  coins sender_address op _40=5000 _42
    THROWANYIFNOT
    5002 PUSHINT	//  coins sender_address op _44=5002
    s2 PUSH	//  coins sender_address op _44=5002 sender_address
    SBITS	//  coins sender_address op _44=5002 _45
    267 PUSHINT	//  coins sender_address op _44=5002 _45 _46=267
    EQUAL	//  coins sender_address op _44=5002 _47
    THROWANYIFNOT
    OVER	//  coins sender_address op csender
    11 PUSHINT	//  coins sender_address op csender _51=11
    SDSKIPFIRST	//  coins sender_address op csender
    256 LDU	//  coins sender_address op _200 _199
    DROP	//  coins sender_address op senderkey
    OVER
    1000 PUSHINT	//  coins sender_address op senderkey op _57=1000
    EQUAL	//  coins sender_address op senderkey _58
    IFJMP:<{	//  coins sender_address op senderkey
      NIP	//  coins sender_address senderkey
      s2 PUSH
      3030000000 PUSHINT	//  coins sender_address senderkey coins _60=3030000000
      LESS	//  coins sender_address senderkey _61
      1102 THROWIF
      ads GETGLOB	//  coins sender_address senderkey _65
      s1 s(-1) PUXC
      8 PUSHPOW2	//  coins sender_address senderkey senderkey _65 _66=256
      DICTUGET
      NULLSWAPIFNOT	//  coins sender_address senderkey _201 _202
      NIP	//  coins sender_address senderkey success
      -1 EQINT	//  coins sender_address senderkey _70
      1101 THROWIF
      s0 s2 XCHG	//  senderkey sender_address coins
      s0 DUMP	//  senderkey sender_address coins
      DUP
      10000000 PUSHINT	//  senderkey sender_address coins coins _75=10000000
      DIV	//  senderkey sender_address coins forad
      s0 DUMP	//  senderkey sender_address coins forad
      10000000 PUSHINT	//  senderkey sender_address coins forad _79=10000000
      MUL	//  senderkey sender_address coins forad
      s0 DUMP	//  senderkey sender_address coins forad
      20000000 PUSHINT	//  senderkey sender_address coins forad _83=20000000
      SUB	//  senderkey sender_address coins forad
      s0 DUMP	//  senderkey sender_address coins forad
      TUCK	//  senderkey sender_address forad coins forad
      SUB	//  senderkey sender_address forad exed
      s0 DUMP	//  senderkey sender_address forad exed
      5005 PUSHINT	//  senderkey sender_address forad exed _91=5005
      OVER
      25000000 PUSHINT	//  senderkey sender_address forad exed _91=5005 exed _92=25000000
      LESS	//  senderkey sender_address forad exed _91=5005 _93
      THROWANYIF
      10000000 PUSHINT	//  senderkey sender_address forad exed _96=10000000
      SUB	//  senderkey sender_address forad formanager
      s0 DUMP	//  senderkey sender_address forad formanager
      NOW	//  senderkey sender_address forad formanager _101
      864000 PUSHINT	//  senderkey sender_address forad formanager _101 _102=864000
      ADD	//  senderkey sender_address forad formanager _103
      NEWC	//  senderkey sender_address forad formanager _103 _104
      s0 s3 XCHG2	//  senderkey sender_address _103 formanager _104 forad
      STVARUINT16	//  senderkey sender_address _103 formanager _105
      s1 s2 XCHG	//  senderkey sender_address formanager _103 _105
      32 STU	//  senderkey sender_address formanager _107
      ENDC	//  senderkey sender_address formanager datad
      CTOS	//  senderkey sender_address formanager _111
      ads GETGLOB	//  senderkey sender_address formanager _111 _112
      s1 s4 s0 XCHG3
      8 PUSHPOW2	//  formanager sender_address _111 senderkey _112 _113=256
      DICTUADD	//  formanager sender_address _115 _110
      SWAP	//  formanager sender_address _110 _115
      ads SETGLOB	//  formanager sender_address success
      5005 PUSHINT	//  formanager sender_address success _116=5005
      SWAP	//  formanager sender_address _116=5005 success
      -1 NEQINT	//  formanager sender_address _116=5005 _118
      THROWANYIF
      gseqno GETGLOB	//  formanager sender_address _120
      INC	//  formanager sender_address _123
      gseqno SETGLOB
      save_data INLINECALLDICT
      0 PUSHINT	//  formanager sender_address _126=0
      DUP	//  formanager sender_address _126=0 _127=0
      2 PUSHINT	//  formanager sender_address _126=0 _127=0 _128=2
      NEWC	//  formanager sender_address _126=0 _127=0 _128=2 _129
      4 STU	//  formanager sender_address _126=0 _127=0 _131
      2 STU	//  formanager sender_address _126=0 _133
      manager_address GETGLOB	//  formanager sender_address _126=0 _133 _134
      STSLICER	//  formanager sender_address _126=0 _135
      s0 s3 XCHG2	//  _126=0 sender_address _135 formanager
      STVARUINT16	//  _126=0 sender_address _136
      s1 s2 XCHG	//  sender_address _126=0 _136
      107 STU	//  sender_address _150
      SWAP	//  _150 sender_address
      STSLICER	//  _151
      ENDC	//  answer
      DUP	//  answer answer
      CTOS	//  answer sanswer
      SBITS	//  answer lsanswer
      s0 DUMP	//  answer _158
      DROP	//  answer
      0 PUSHINT	//  answer _159=0
      SENDRAWMSG
    }>	//  coins sender_address op senderkey
    s1 s3 XCHG
    3 BLKDROP	//  op
    DUP
    2000 PUSHINT	//  op op _161=2000
    EQUAL	//  op _162
    IFJMP:<{	//  op
      DROP	// 
      gseqno GETGLOB	//  _163
      INC	//  _166
      gseqno SETGLOB
      save_data INLINECALLDICT
    }>	//  op
    DUP
    3000 PUSHINT	//  op op _168=3000
    EQUAL	//  op _169
    IFJMP:<{	//  op
      DROP	// 
      gseqno GETGLOB	//  _170
      INC	//  _173
      gseqno SETGLOB
      save_data INLINECALLDICT
    }>	//  op
    4000 PUSHINT	//  op _175=4000
    EQUAL	//  _176
    IFJMP:<{	// 
      gseqno GETGLOB	//  _177
      INC	//  _180
      gseqno SETGLOB
      save_data INLINECALLDICT
    }>	// 
    5001 PUSHINT	//  _182=5001
    THROWANY
  }>
  get_manager_address PROC:<{
    // 
    load_data CALLDICT
    manager_address GETGLOB	//  _1
  }>
  get_public_key PROC:<{
    // 
    load_data CALLDICT
    public_key GETGLOB	//  _1
  }>
  seqno PROC:<{
    // 
    load_data CALLDICT
    gseqno GETGLOB	//  _1
  }>
  get_ads PROC:<{
    // 
    load_data CALLDICT
    ads GETGLOB	//  _1
  }>
  __test_wrongmessage PROC:<{
    // 
    MYADDR	//  ad
    123 PUSHINT	//  ad _3=123
    1 PUSHINT	//  ad _3=123 _4=1
    NEWC	//  ad _3=123 _4=1 _5
    32 STU	//  ad _3=123 _7
    32 STU	//  ad _9
    MYADDR	//  ad _9 _10
    STSLICER	//  ad _11
    ENDC	//  ad body
    DUP	//  ad body body
    CTOS	//  ad body sbody
    1 PUSHINT	//  ad body sbody _16=1
    0 PUSHINT	//  ad body sbody _16=1 _17=0
    6 PUSHINT	//  ad body sbody _16=1 _17=0 _18=6
    NEWC	//  ad body sbody _16=1 _17=0 _18=6 _19
    4 STU	//  ad body sbody _16=1 _17=0 _21
    s5 PUSH	//  ad body sbody _16=1 _17=0 _21 ad
    STSLICER	//  ad body sbody _16=1 _17=0 _22
    s5 PUSH	//  ad body sbody _16=1 _17=0 _22 ad
    STSLICER	//  ad body sbody _16=1 _17=0 _23
    s5 POP	//  _23 body sbody _16=1 _17=0
    s0 s4 XCHG
    1000 PUSHINT	//  _17=0 body sbody _16=1 _23 _24=1000
    STVARUINT16	//  _17=0 body sbody _16=1 _25
    s1 s4 XCHG	//  _16=1 body sbody _17=0 _25
    106 STU	//  _16=1 body sbody _37
    s1 s3 XCHG	//  sbody body _16=1 _37
    1 STU	//  sbody body _39
    STREF	//  sbody _40
    ENDC	//  sbody full
    1000 PUSHINT	//  sbody full _46=1000
    s0 s2 XCHG
    10 PUSHINT
    -ROT	//  _46=1000 _47=10 full sbody
    4 TUPLE	//  pila
    CONT:<{
      recv_internal CALLDICT
    }>	//  pila _61
    SWAP	//  _61 pila
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  _69 _70 _71
    DROP	//  exit_code gas_usado1
    SWAP	//  gas_usado1 exit_code
    s0 DUMP	//  gas_usado1 exit_code
    9 NEQINT	//  gas_usado1 _67
    100 THROWIF
  }>
  __test_wrongseqno PROC:<{
    // 
    MYADDR	//  ad
    1000 PUSHINT	//  ad _3=1000
    1 PUSHINT	//  ad _3=1000 _4=1
    0 PUSHINT	//  ad _3=1000 _4=1 _5=0
    DUP	//  ad _3=1000 _4=1 _5=0 _6=0
    NEWC	//  ad _3=1000 _4=1 _5=0 _6=0 _7
    256 STU	//  ad _3=1000 _4=1 _5=0 _9
    256 STU	//  ad _3=1000 _4=1 _11
    32 STU	//  ad _3=1000 _13
    32 STU	//  ad _15
    MYADDR	//  ad _15 _16
    STSLICER	//  ad _17
    ENDC	//  ad body
    DUP	//  ad body body
    CTOS	//  ad body sbody
    1 PUSHINT	//  ad body sbody _22=1
    0 PUSHINT	//  ad body sbody _22=1 _23=0
    6 PUSHINT	//  ad body sbody _22=1 _23=0 _24=6
    NEWC	//  ad body sbody _22=1 _23=0 _24=6 _25
    4 STU	//  ad body sbody _22=1 _23=0 _27
    s5 PUSH	//  ad body sbody _22=1 _23=0 _27 ad
    STSLICER	//  ad body sbody _22=1 _23=0 _28
    s5 PUSH	//  ad body sbody _22=1 _23=0 _28 ad
    STSLICER	//  ad body sbody _22=1 _23=0 _29
    1000 PUSHINT	//  ad body sbody _22=1 _23=0 _29 _30=1000
    STVARUINT16	//  ad body sbody _22=1 _23=0 _31
    106 STU	//  ad body sbody _22=1 _43
    1 STU	//  ad body sbody _45
    s1 s2 XCHG	//  ad sbody body _45
    STREF	//  ad sbody _46
    ENDC	//  ad sbody full
    1000 PUSHINT	//  ad sbody full _52=1000
    s0 s2 XCHG
    10 PUSHINT
    -ROT	//  ad _52=1000 _53=10 full sbody
    4 TUPLE	//  ad pila
    NEWDICT	//  ad pila _56
    2 PUSHINT	//  ad pila _56 _57=2
    33451796392292203403440659262546624803323361398262915766836839499908567744559 PUSHINT	//  ad pila _56 _57=2 _58=33451796392292203403440659262546624803323361398262915766836839499908567744559
    NEWC	//  ad pila _56 _57=2 _58=33451796392292203403440659262546624803323361398262915766836839499908567744559 _59
    s0 s5 XCHG2	//  _58=33451796392292203403440659262546624803323361398262915766836839499908567744559 pila _56 _57=2 _59 ad
    STSLICER	//  _58=33451796392292203403440659262546624803323361398262915766836839499908567744559 pila _56 _57=2 _60
    s1 s4 XCHG	//  _57=2 pila _56 _58=33451796392292203403440659262546624803323361398262915766836839499908567744559 _60
    256 STU	//  _57=2 pila _56 _62
    s1 s3 XCHG	//  _56 pila _57=2 _62
    32 STU	//  _56 pila _64
    s1 s2 XCHG	//  pila _56 _64
    STDICT	//  pila _65
    ENDC	//  pila data
    c4 POP
    CONT:<{
      recv_internal CALLDICT
    }>	//  pila _71
    SWAP	//  _71 pila
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  _79 _80 _81
    DROP	//  exit_code gas_usado1
    SWAP	//  gas_usado1 exit_code
    s0 DUMP	//  gas_usado1 exit_code
    5004 PUSHINT	//  gas_usado1 exit_code _76=5004
    NEQ	//  gas_usado1 _77
    100 THROWIF
  }>
  __test_wrongsignature PROC:<{
    // 
    MYADDR	//  ad
    1000 PUSHINT	//  ad _3=1000
    1 PUSHINT	//  ad _3=1000 _4=1
    0 PUSHINT	//  ad _3=1000 _4=1 _5=0
    DUP	//  ad _3=1000 _4=1 _5=0 _6=0
    NEWC	//  ad _3=1000 _4=1 _5=0 _6=0 _7
    256 STU	//  ad _3=1000 _4=1 _5=0 _9
    256 STU	//  ad _3=1000 _4=1 _11
    32 STU	//  ad _3=1000 _13
    32 STU	//  ad _15
    MYADDR	//  ad _15 _16
    STSLICER	//  ad _17
    ENDC	//  ad body
    DUP	//  ad body body
    CTOS	//  ad body sbody
    1 PUSHINT	//  ad body sbody _22=1
    0 PUSHINT	//  ad body sbody _22=1 _23=0
    6 PUSHINT	//  ad body sbody _22=1 _23=0 _24=6
    NEWC	//  ad body sbody _22=1 _23=0 _24=6 _25
    4 STU	//  ad body sbody _22=1 _23=0 _27
    s5 PUSH	//  ad body sbody _22=1 _23=0 _27 ad
    STSLICER	//  ad body sbody _22=1 _23=0 _28
    s5 PUSH	//  ad body sbody _22=1 _23=0 _28 ad
    STSLICER	//  ad body sbody _22=1 _23=0 _29
    1000 PUSHINT	//  ad body sbody _22=1 _23=0 _29 _30=1000
    STVARUINT16	//  ad body sbody _22=1 _23=0 _31
    106 STU	//  ad body sbody _22=1 _43
    1 STU	//  ad body sbody _45
    s1 s2 XCHG	//  ad sbody body _45
    STREF	//  ad sbody _46
    ENDC	//  ad sbody full
    1000 PUSHINT	//  ad sbody full _52=1000
    s0 s2 XCHG
    10 PUSHINT
    -ROT	//  ad _52=1000 _53=10 full sbody
    4 TUPLE	//  ad pila
    NEWDICT	//  ad pila _56
    1 PUSHINT	//  ad pila _56 _57=1
    33451796392292203403440659262546624803323361398262915766836839499908567744559 PUSHINT	//  ad pila _56 _57=1 _58=33451796392292203403440659262546624803323361398262915766836839499908567744559
    NEWC	//  ad pila _56 _57=1 _58=33451796392292203403440659262546624803323361398262915766836839499908567744559 _59
    s0 s5 XCHG2	//  _58=33451796392292203403440659262546624803323361398262915766836839499908567744559 pila _56 _57=1 _59 ad
    STSLICER	//  _58=33451796392292203403440659262546624803323361398262915766836839499908567744559 pila _56 _57=1 _60
    s1 s4 XCHG	//  _57=1 pila _56 _58=33451796392292203403440659262546624803323361398262915766836839499908567744559 _60
    256 STU	//  _57=1 pila _56 _62
    s1 s3 XCHG	//  _56 pila _57=1 _62
    32 STU	//  _56 pila _64
    s1 s2 XCHG	//  pila _56 _64
    STDICT	//  pila _65
    ENDC	//  pila data
    c4 POP
    CONT:<{
      recv_internal CALLDICT
    }>	//  pila _71
    SWAP	//  _71 pila
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  _79 _80 _81
    DROP	//  exit_code gas_usado1
    SWAP	//  gas_usado1 exit_code
    s0 DUMP	//  gas_usado1 exit_code
    5000 PUSHINT	//  gas_usado1 exit_code _76=5000
    NEQ	//  gas_usado1 _77
    101 THROWIF
  }>
  reconoce_c5 PROCINLINE:<{
    // 
    c5 PUSH	//  c5
    NIL	//  c5 actions
    SWAP	//  actions c5
    CTOS	//  actions out_action_node
    DUP	//  actions out_action_node out_action_node
    SBITS	//  actions out_action_node _6
    0 EQINT	//  actions out_action_node _8
    IF:<{	//  actions out_action_node
      2DROP	// 
      NIL	//  _9
    }>ELSE<{	//  actions out_action_node
      NIL	//  actions out_action_node list_of_actions_tuple
      0 PUSHINT	//  actions out_action_node list_of_actions_tuple num=0
      UNTIL:<{
        s0 s2 XCHG	//  actions num list_of_actions_tuple out_action_node
        LDREF	//  actions num list_of_actions_tuple next out_action_node
        s0 s4 XCHG2	//  next num list_of_actions_tuple out_action_node actions
        CONS	//  next num list_of_actions_tuple actions
        s0 s3 XCHG	//  actions num list_of_actions_tuple next
        CTOS	//  actions num list_of_actions_tuple out_action_node
        s0 s2 XCHG	//  actions out_action_node list_of_actions_tuple num
        INC	//  actions out_action_node list_of_actions_tuple num
        s2 PUSH	//  actions out_action_node list_of_actions_tuple num out_action_node
        SBITS	//  actions out_action_node list_of_actions_tuple num _23
        0 EQINT	//  actions out_action_node list_of_actions_tuple num break
      }>	//  actions out_action_node list_of_actions_tuple num
      s2 POP	//  actions num list_of_actions_tuple
      0 PUSHINT	//  actions num list_of_actions_tuple i=0
      UNTIL:<{
        s0 s3 XCHG	//  i num list_of_actions_tuple actions
        UNCONS	//  i num list_of_actions_tuple out_action actions
        SWAP	//  i num list_of_actions_tuple actions out_action
        32 LDU	//  i num list_of_actions_tuple actions action_code out_action
        OVER
        247711853 PUSHINT	//  i num list_of_actions_tuple actions action_code out_action action_code _35=247711853
        EQUAL	//  i num list_of_actions_tuple actions action_code out_action _36
        IF:<{	//  i num list_of_actions_tuple actions action_code out_action
          NIP	//  i num list_of_actions_tuple actions out_action
          parse_send_raw_message INLINECALLDICT	//  i num list_of_actions_tuple actions mode body
          0 PUSHINT	//  i num list_of_actions_tuple actions mode body _42=0
          s0 s2 XCHG	//  i num list_of_actions_tuple actions _42=0 body mode
          TRIPLE	//  i num list_of_actions_tuple actions _41
          s1 s2 XCHG	//  i num actions list_of_actions_tuple _41
          TPUSH	//  i num actions list_of_actions_tuple
        }>ELSE<{	//  i num list_of_actions_tuple actions action_code out_action
          OVER
          2907562126 PUSHINT	//  i num list_of_actions_tuple actions action_code out_action action_code _44=2907562126
          EQUAL	//  i num list_of_actions_tuple actions action_code out_action _45
          IF:<{	//  i num list_of_actions_tuple actions action_code out_action
            NIP	//  i num list_of_actions_tuple actions out_action
            parse_set_code INLINECALLDICT	//  i num list_of_actions_tuple actions new_setcode
            1 PUSHINT	//  i num list_of_actions_tuple actions new_setcode _50=1
            SWAP
            -1 PUSHINT	//  i num list_of_actions_tuple actions _50=1 new_setcode _51=-1
            TRIPLE	//  i num list_of_actions_tuple actions _49
            s1 s2 XCHG	//  i num actions list_of_actions_tuple _49
            TPUSH	//  i num actions list_of_actions_tuple
          }>ELSE<{	//  i num list_of_actions_tuple actions action_code out_action
            OVER
            921090057 PUSHINT	//  i num list_of_actions_tuple actions action_code out_action action_code _53=921090057
            EQUAL	//  i num list_of_actions_tuple actions action_code out_action _54
            IF:<{	//  i num list_of_actions_tuple actions action_code out_action
              NIP	//  i num list_of_actions_tuple actions out_action
              parse_raw_reserve INLINECALLDICT	//  i num list_of_actions_tuple actions mode reserve
              2 PUSHINT	//  i num list_of_actions_tuple actions mode reserve _60=2
              s0 s2 XCHG	//  i num list_of_actions_tuple actions _60=2 reserve mode
              TRIPLE	//  i num list_of_actions_tuple actions _59
              s1 s2 XCHG	//  i num actions list_of_actions_tuple _59
              TPUSH	//  i num actions list_of_actions_tuple
            }>ELSE<{	//  i num list_of_actions_tuple actions action_code out_action
              SWAP
              653925844 PUSHINT	//  i num list_of_actions_tuple actions out_action action_code _62=653925844
              EQUAL	//  i num list_of_actions_tuple actions out_action _63
              IF:<{	//  i num list_of_actions_tuple actions out_action
                parse_lib_code INLINECALLDICT	//  i num list_of_actions_tuple actions mode lib_cell_or_lib_hash
                3 PUSHINT	//  i num list_of_actions_tuple actions mode lib_cell_or_lib_hash _69=3
                s0 s2 XCHG	//  i num list_of_actions_tuple actions _69=3 lib_cell_or_lib_hash mode
                TRIPLE	//  i num list_of_actions_tuple actions _68
                s1 s2 XCHG	//  i num actions list_of_actions_tuple _68
                TPUSH	//  i num actions list_of_actions_tuple
                SWAP	//  i num list_of_actions_tuple actions
              }>ELSE<{
                DROP	//  i num list_of_actions_tuple actions
              }>
              SWAP	//  i num actions list_of_actions_tuple
            }>
          }>
        }>
        s0 s3 XCHG	//  list_of_actions_tuple num actions i
        INC	//  list_of_actions_tuple num actions i
        s0 s2 PUSH2	//  list_of_actions_tuple num actions i i num
        GEQ	//  list_of_actions_tuple num actions i _73
        s2 s4 XCHG	//  actions num list_of_actions_tuple i _73
      }>	//  actions num list_of_actions_tuple i
      s1 s3 XCHG
      3 BLKDROP	//  list_of_actions_tuple
    }>
  }>
  __test_goodsignature_badop PROC:<{
    // 
    MYADDR	//  ad
    1 PUSHINT	//  ad _3=1
    NEWC	//  ad _3=1 _4
    32 STU	//  ad _6
    x{31323334} PUSHSLICE	//  ad _6 _7
    STSLICER	//  ad _8
    ENDC	//  ad body_to_sign
    CTOS	//  ad sbody_to_sign
    17144406180444315820724024059434656869322345781021736120417173811110701150464 PUSHINT	//  ad sbody_to_sign _13=17144406180444315820724024059434656869322345781021736120417173811110701150464
    86363322427249124616956870879939182925545766143075888967664368716527894077204 PUSHINT	//  ad sbody_to_sign _13=17144406180444315820724024059434656869322345781021736120417173811110701150464 _14=86363322427249124616956870879939182925545766143075888967664368716527894077204
    NEWC	//  ad sbody_to_sign _13=17144406180444315820724024059434656869322345781021736120417173811110701150464 _14=86363322427249124616956870879939182925545766143075888967664368716527894077204 _15
    256 STU	//  ad sbody_to_sign _13=17144406180444315820724024059434656869322345781021736120417173811110701150464 _17
    256 STU	//  ad sbody_to_sign _19
    SWAP	//  ad _19 sbody_to_sign
    STSLICER	//  ad _20
    ENDC	//  ad body
    DUP	//  ad body body
    CTOS	//  ad body sbody
    1 PUSHINT	//  ad body sbody _25=1
    0 PUSHINT	//  ad body sbody _25=1 _26=0
    6 PUSHINT	//  ad body sbody _25=1 _26=0 _27=6
    NEWC	//  ad body sbody _25=1 _26=0 _27=6 _28
    4 STU	//  ad body sbody _25=1 _26=0 _30
    s5 PUSH	//  ad body sbody _25=1 _26=0 _30 ad
    STSLICER	//  ad body sbody _25=1 _26=0 _31
    s5 PUSH	//  ad body sbody _25=1 _26=0 _31 ad
    STSLICER	//  ad body sbody _25=1 _26=0 _32
    1000 PUSHINT	//  ad body sbody _25=1 _26=0 _32 _33=1000
    STVARUINT16	//  ad body sbody _25=1 _26=0 _34
    106 STU	//  ad body sbody _25=1 _46
    1 STU	//  ad body sbody _48
    s1 s2 XCHG	//  ad sbody body _48
    STREF	//  ad sbody _49
    ENDC	//  ad sbody full
    20000000 PUSHINT	//  ad sbody full _55=20000000
    s0 s2 XCHG
    10 PUSHINT
    -ROT	//  ad _55=20000000 _56=10 full sbody
    4 TUPLE	//  ad pila
    NEWDICT	//  ad pila _59
    1 PUSHINT	//  ad pila _59 _60=1
    33451796392292203403440659262546624803323361398262915766836839499908567744559 PUSHINT	//  ad pila _59 _60=1 _61=33451796392292203403440659262546624803323361398262915766836839499908567744559
    NEWC	//  ad pila _59 _60=1 _61=33451796392292203403440659262546624803323361398262915766836839499908567744559 _62
    s0 s5 XCHG2	//  _61=33451796392292203403440659262546624803323361398262915766836839499908567744559 pila _59 _60=1 _62 ad
    STSLICER	//  _61=33451796392292203403440659262546624803323361398262915766836839499908567744559 pila _59 _60=1 _63
    s1 s4 XCHG	//  _60=1 pila _59 _61=33451796392292203403440659262546624803323361398262915766836839499908567744559 _63
    256 STU	//  _60=1 pila _59 _65
    s1 s3 XCHG	//  _59 pila _60=1 _65
    32 STU	//  _59 pila _67
    s1 s2 XCHG	//  pila _59 _67
    STDICT	//  pila _68
    ENDC	//  pila data
    c4 POP
    CONT:<{
      recv_internal CALLDICT
    }>	//  pila _74
    SWAP	//  _74 pila
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  _82 _83 _84
    DROP	//  exit_code gas_usado1
    SWAP	//  gas_usado1 exit_code
    s0 DUMP	//  gas_usado1 exit_code
    5001 PUSHINT	//  gas_usado1 exit_code _79=5001
    NEQ	//  gas_usado1 _80
    101 THROWIF
  }>
  __test_add_ad_fewcoins PROC:<{
    // 
    MYADDR	//  ad
    1000 PUSHINT	//  ad _3=1000
    1 PUSHINT	//  ad _3=1000 _4=1
    NEWC	//  ad _3=1000 _4=1 _5
    32 STU	//  ad _3=1000 _7
    32 STU	//  ad _9
    ENDC	//  ad body_to_sign
    CTOS	//  ad sbody_to_sign
    DUP	//  ad sbody_to_sign sbody_to_sign
    HASHSU	//  ad sbody_to_sign tmphash
    29357836411124981285495765108012652830917040149534034395677251036887651600221 PUSHINT	//  ad sbody_to_sign tmphash _16=29357836411124981285495765108012652830917040149534034395677251036887651600221
    NEQ	//  ad sbody_to_sign _17
    100 THROWIF
    52055047891093896122722321857518565569980897462306809874946417405718241984526 PUSHINT	//  ad sbody_to_sign _20=52055047891093896122722321857518565569980897462306809874946417405718241984526
    95817253206089097193931663397172458887240792975504841423923031368924763547095 PUSHINT	//  ad sbody_to_sign _20=52055047891093896122722321857518565569980897462306809874946417405718241984526 _21=95817253206089097193931663397172458887240792975504841423923031368924763547095
    NEWC	//  ad sbody_to_sign _20=52055047891093896122722321857518565569980897462306809874946417405718241984526 _21=95817253206089097193931663397172458887240792975504841423923031368924763547095 _22
    256 STU	//  ad sbody_to_sign _20=52055047891093896122722321857518565569980897462306809874946417405718241984526 _24
    256 STU	//  ad sbody_to_sign _26
    SWAP	//  ad _26 sbody_to_sign
    STSLICER	//  ad _27
    ENDC	//  ad body
    DUP	//  ad body body
    CTOS	//  ad body sbody
    1 PUSHINT	//  ad body sbody _32=1
    0 PUSHINT	//  ad body sbody _32=1 _33=0
    6 PUSHINT	//  ad body sbody _32=1 _33=0 _34=6
    NEWC	//  ad body sbody _32=1 _33=0 _34=6 _35
    4 STU	//  ad body sbody _32=1 _33=0 _37
    s5 PUSH	//  ad body sbody _32=1 _33=0 _37 ad
    STSLICER	//  ad body sbody _32=1 _33=0 _38
    s5 PUSH	//  ad body sbody _32=1 _33=0 _38 ad
    STSLICER	//  ad body sbody _32=1 _33=0 _39
    1000 PUSHINT	//  ad body sbody _32=1 _33=0 _39 _40=1000
    STVARUINT16	//  ad body sbody _32=1 _33=0 _41
    106 STU	//  ad body sbody _32=1 _53
    1 STU	//  ad body sbody _55
    s1 s2 XCHG	//  ad sbody body _55
    STREF	//  ad sbody _56
    ENDC	//  ad sbody full
    20000000 PUSHINT	//  ad sbody full _62=20000000
    s0 s2 XCHG
    10 PUSHINT
    -ROT	//  ad _62=20000000 _63=10 full sbody
    4 TUPLE	//  ad pila
    NEWDICT	//  ad pila _66
    1 PUSHINT	//  ad pila _66 _67=1
    33451796392292203403440659262546624803323361398262915766836839499908567744559 PUSHINT	//  ad pila _66 _67=1 _68=33451796392292203403440659262546624803323361398262915766836839499908567744559
    NEWC	//  ad pila _66 _67=1 _68=33451796392292203403440659262546624803323361398262915766836839499908567744559 _69
    s5 PUSH	//  ad pila _66 _67=1 _68=33451796392292203403440659262546624803323361398262915766836839499908567744559 _69 ad
    STSLICER	//  ad pila _66 _67=1 _68=33451796392292203403440659262546624803323361398262915766836839499908567744559 _70
    256 STU	//  ad pila _66 _67=1 _72
    32 STU	//  ad pila _66 _74
    STDICT	//  ad pila _75
    ENDC	//  ad pila data
    c4 POP
    CONT:<{
      recv_internal CALLDICT
    }>	//  ad pila _81
    SWAP	//  ad _81 pila
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  ad _117 _118 _119
    DROP	//  ad exit_code gas_usado1
    SWAP	//  ad gas_usado1 exit_code
    s0 DUMP	//  ad gas_usado1 exit_code
    1102 PUSHINT	//  ad gas_usado1 exit_code _86=1102
    NEQ	//  ad gas_usado1 _87
    101 THROWIF
    c4 PUSH	//  ad gas_usado1 _90
    CTOS	//  ad gas_usado1 ds
    LDMSGADDR	//  ad gas_usado1 _93 ds
    s0 s3 XCHG	//  ds gas_usado1 _93 ad
    SDEQ	//  ds gas_usado1 _95
    102 THROWIFNOT
    SWAP	//  gas_usado1 ds
    256 LDU	//  gas_usado1 _98 ds
    SWAP
    33451796392292203403440659262546624803323361398262915766836839499908567744559 PUSHINT	//  gas_usado1 ds _98 _101=33451796392292203403440659262546624803323361398262915766836839499908567744559
    EQUAL	//  gas_usado1 ds _102
    103 THROWIFNOT
    32 LDU	//  gas_usado1 _125 _124
    DROP	//  gas_usado1 _105
    1 EQINT	//  gas_usado1 _109
    104 THROWIFNOT
  }>
  __test_add_ad_somecoins PROC:<{
    // 
    MYADDR	//  myaddress
    1000 PUSHINT	//  myaddress _3=1000
    1 PUSHINT	//  myaddress _3=1000 _4=1
    NEWC	//  myaddress _3=1000 _4=1 _5
    32 STU	//  myaddress _3=1000 _7
    32 STU	//  myaddress _9
    ENDC	//  myaddress body_to_sign
    CTOS	//  myaddress sbody_to_sign
    DUP	//  myaddress sbody_to_sign sbody_to_sign
    HASHSU	//  myaddress sbody_to_sign tmphash
    29357836411124981285495765108012652830917040149534034395677251036887651600221 PUSHINT	//  myaddress sbody_to_sign tmphash _16=29357836411124981285495765108012652830917040149534034395677251036887651600221
    NEQ	//  myaddress sbody_to_sign _17
    100 THROWIF
    52055047891093896122722321857518565569980897462306809874946417405718241984526 PUSHINT	//  myaddress sbody_to_sign _20=52055047891093896122722321857518565569980897462306809874946417405718241984526
    95817253206089097193931663397172458887240792975504841423923031368924763547095 PUSHINT	//  myaddress sbody_to_sign _20=52055047891093896122722321857518565569980897462306809874946417405718241984526 _21=95817253206089097193931663397172458887240792975504841423923031368924763547095
    NEWC	//  myaddress sbody_to_sign _20=52055047891093896122722321857518565569980897462306809874946417405718241984526 _21=95817253206089097193931663397172458887240792975504841423923031368924763547095 _22
    256 STU	//  myaddress sbody_to_sign _20=52055047891093896122722321857518565569980897462306809874946417405718241984526 _24
    256 STU	//  myaddress sbody_to_sign _26
    SWAP	//  myaddress _26 sbody_to_sign
    STSLICER	//  myaddress _27
    ENDC	//  myaddress body
    DUP	//  myaddress body body
    CTOS	//  myaddress body sbody
    1 PUSHINT	//  myaddress body sbody _32=1
    0 PUSHINT	//  myaddress body sbody _32=1 _33=0
    6 PUSHINT	//  myaddress body sbody _32=1 _33=0 _34=6
    NEWC	//  myaddress body sbody _32=1 _33=0 _34=6 _35
    4 STU	//  myaddress body sbody _32=1 _33=0 _37
    s5 PUSH	//  myaddress body sbody _32=1 _33=0 _37 myaddress
    STSLICER	//  myaddress body sbody _32=1 _33=0 _38
    s5 PUSH	//  myaddress body sbody _32=1 _33=0 _38 myaddress
    STSLICER	//  myaddress body sbody _32=1 _33=0 _39
    10029000000 PUSHINT	//  myaddress body sbody _32=1 _33=0 _39 _40=10029000000
    STVARUINT16	//  myaddress body sbody _32=1 _33=0 _41
    106 STU	//  myaddress body sbody _32=1 _53
    1 STU	//  myaddress body sbody _55
    s1 s2 XCHG	//  myaddress sbody body _55
    STREF	//  myaddress sbody _56
    ENDC	//  myaddress sbody full
    20000000 PUSHINT	//  myaddress sbody full _62=20000000
    s0 s2 XCHG
    10 PUSHINT
    -ROT	//  myaddress _62=20000000 _63=10 full sbody
    4 TUPLE	//  myaddress pila
    NEWDICT	//  myaddress pila _66
    1 PUSHINT	//  myaddress pila _66 _67=1
    33451796392292203403440659262546624803323361398262915766836839499908567744559 PUSHINT	//  myaddress pila _66 _67=1 _68=33451796392292203403440659262546624803323361398262915766836839499908567744559
    NEWC	//  myaddress pila _66 _67=1 _68=33451796392292203403440659262546624803323361398262915766836839499908567744559 _69
    s5 PUSH	//  myaddress pila _66 _67=1 _68=33451796392292203403440659262546624803323361398262915766836839499908567744559 _69 myaddress
    STSLICER	//  myaddress pila _66 _67=1 _68=33451796392292203403440659262546624803323361398262915766836839499908567744559 _70
    256 STU	//  myaddress pila _66 _67=1 _72
    32 STU	//  myaddress pila _66 _74
    STDICT	//  myaddress pila _75
    ENDC	//  myaddress pila data
    c4 POP
    CONT:<{
      recv_internal CALLDICT
    }>	//  myaddress pila _81
    SWAP	//  myaddress _81 pila
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  myaddress _236 _237 _238
    DROP	//  myaddress exit_code gas_usado1
    SWAP	//  myaddress gas_usado1 exit_code
    s0 DUMP	//  myaddress gas_usado1 exit_code
    0 NEQINT	//  myaddress gas_usado1 _87
    101 THROWIF
    c4 PUSH	//  myaddress gas_usado1 _90
    CTOS	//  myaddress gas_usado1 ds
    LDMSGADDR	//  myaddress gas_usado1 _93 ds
    s1 s3 XCPU	//  myaddress gas_usado1 ds _93 myaddress
    SDEQ	//  myaddress gas_usado1 ds _95
    102 THROWIFNOT
    256 LDU	//  myaddress gas_usado1 _98 ds
    SWAP
    33451796392292203403440659262546624803323361398262915766836839499908567744559 PUSHINT	//  myaddress gas_usado1 ds _98 _101=33451796392292203403440659262546624803323361398262915766836839499908567744559
    EQUAL	//  myaddress gas_usado1 ds _102
    103 THROWIFNOT
    32 LDU	//  myaddress gas_usado1 lseqno ds
    SWAP	//  myaddress gas_usado1 ds lseqno
    s0 DUMP	//  myaddress gas_usado1 ds lseqno
    2 EQINT	//  myaddress gas_usado1 ds _112
    104 THROWIFNOT
    LDDICT	//  myaddress gas_usado1 _246 _245
    DROP	//  myaddress gas_usado1 m
    DUP	//  myaddress gas_usado1 m m
    DICTEMPTY	//  myaddress gas_usado1 m _118
    105 THROWIF
    s2 PUSH	//  myaddress gas_usado1 m csender
    11 PUSHINT	//  myaddress gas_usado1 m csender _122=11
    SDSKIPFIRST	//  myaddress gas_usado1 m csender
    256 LDU	//  myaddress gas_usado1 m _248 _247
    DROP	//  myaddress gas_usado1 m senderkey
    SWAP
    8 PUSHPOW2	//  myaddress gas_usado1 senderkey m _130=256
    DICTUGET
    NULLSWAPIFNOT	//  myaddress gas_usado1 sd success
    -1 EQINT	//  myaddress gas_usado1 sd _134
    106 THROWIFNOT
    LDVARUINT16	//  myaddress gas_usado1 rec sd
    SWAP	//  myaddress gas_usado1 sd rec
    s0 DUMP	//  myaddress gas_usado1 sd rec
    10000000000 PUSHINT	//  myaddress gas_usado1 sd rec _142=10000000000
    EQUAL	//  myaddress gas_usado1 sd _143
    107 THROWIFNOT
    32 LDU	//  myaddress gas_usado1 _254 _253
    DROP	//  myaddress gas_usado1 valid
    s0 DUMP	//  myaddress gas_usado1 valid
    NOW	//  myaddress gas_usado1 valid _152
    SUB	//  myaddress gas_usado1 _153
    3600 PUSHINT	//  myaddress gas_usado1 _153 _154=3600
    DIV	//  myaddress gas_usado1 hours_to_expire
    240 PUSHINT	//  myaddress gas_usado1 hours_to_expire _157=240
    EQUAL	//  myaddress gas_usado1 _158
    108 THROWIFNOT
    reconoce_c5 INLINECALLDICT	//  myaddress gas_usado1 actions
    s0 DUMP	//  myaddress gas_usado1 actions
    DUP	//  myaddress gas_usado1 actions actions
    TLEN	//  myaddress gas_usado1 actions _165
    1 EQINT	//  myaddress gas_usado1 actions _167
    109 THROWIFNOT
    0 INDEX	//  myaddress gas_usado1 a0
    1 INDEX	//  myaddress gas_usado1 _174
    CTOS	//  myaddress gas_usado1 sb0
    s0 DUMP	//  myaddress gas_usado1 sb0
    4 LDU	//  myaddress gas_usado1 flags sb0
    SWAP	//  myaddress gas_usado1 sb0 flags
    2 EQINT	//  myaddress gas_usado1 sb0 _184
    110 THROWIFNOT
    2 LDU	//  myaddress gas_usado1 sa sb0
    SWAP	//  myaddress gas_usado1 sb0 sa
    s0 DUMP	//  myaddress gas_usado1 sb0 sa
    0 EQINT	//  myaddress gas_usado1 sb0 _194
    111 THROWIFNOT
    LDMSGADDR	//  myaddress gas_usado1 ra sb0
    s0 s3 XCHG	//  sb0 gas_usado1 ra myaddress
    SDEQ	//  sb0 gas_usado1 _200
    112 THROWIFNOT
    SWAP	//  gas_usado1 sb0
    LDVARUINT16	//  gas_usado1 _262 _261
    DROP	//  gas_usado1 rcoins
    s0 DUMP	//  gas_usado1 rcoins
    19000000 PUSHINT	//  gas_usado1 rcoins _208=19000000
    EQUAL	//  gas_usado1 _209
    112 THROWIFNOT
    NEWDICT	//  gas_usado1 tdic
    NEWC	//  gas_usado1 tdic otra
    s0 DUMP	//  gas_usado1 tdic otra
    STDICT	//  gas_usado1 _218
    ENDC	//  gas_usado1 f
    s0 DUMP	//  gas_usado1 f
    CTOS	//  gas_usado1 af
    DUP	//  gas_usado1 af af
    SBITS	//  gas_usado1 af laf
    s0 DUMP	//  gas_usado1 af _227
    DROP	//  gas_usado1 af
    1 LDU	//  gas_usado1 fcont af
    SWAP	//  gas_usado1 af fcont
    s0 DUMP	//  gas_usado1 af _233
    DROP	//  gas_usado1 af
    s0 DUMP	//  gas_usado1 _235
    DROP	//  gas_usado1
  }>
}END>c
